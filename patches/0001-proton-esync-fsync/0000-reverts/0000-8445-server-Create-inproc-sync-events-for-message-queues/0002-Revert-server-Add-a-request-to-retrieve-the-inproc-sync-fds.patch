--- b/dlls/ntdll/unix/server.c
+++ a/dlls/ntdll/unix/server.c
@@ -104,7 +104,7 @@
 static int fd_socket = -1;  /* socket to exchange file descriptors with the server */
 static int initial_cwd = -1;
 static pid_t server_pid;
+static pthread_mutex_t fd_cache_mutex = PTHREAD_MUTEX_INITIALIZER;
-pthread_mutex_t fd_cache_mutex = PTHREAD_MUTEX_INITIALIZER;
 
 /* atomically exchange a 64-bit value */
 static inline LONG64 interlocked_xchg64( LONG64 *dest, LONG64 val )
--- b/dlls/ntdll/unix/sync.c
+++ a/dlls/ntdll/unix/sync.c
@@ -307,45 +307,6 @@
 }
 
 
-struct inproc_sync
-{
-    int fd;
-    unsigned int type : 2;
-};
-
-static void release_inproc_sync( struct inproc_sync *sync )
-{
-    close( sync->fd );
-}
-
-static NTSTATUS get_inproc_sync( HANDLE handle, struct inproc_sync *sync )
-{
-    sigset_t sigset;
-    NTSTATUS ret;
-
-    /* We need to use fd_cache_mutex here to protect against races with
-     * other threads trying to receive fds for the fd cache,
-     * and we need to use an uninterrupted section to prevent reentrancy. */
-    server_enter_uninterrupted_section( &fd_cache_mutex, &sigset );
-
-    SERVER_START_REQ( get_inproc_sync_fd )
-    {
-        req->handle = wine_server_obj_handle( handle );
-        if (!(ret = wine_server_call( req )))
-        {
-            obj_handle_t fd_handle;
-            sync->fd = wine_server_receive_fd( &fd_handle );
-            assert( wine_server_ptr_handle(fd_handle) == handle );
-            sync->type = reply->type;
-        }
-    }
-    SERVER_END_REQ;
-
-    server_leave_uninterrupted_section( &fd_cache_mutex, &sigset );
-
-    return ret;
-}
-
 static NTSTATUS inproc_release_semaphore( HANDLE handle, ULONG count, ULONG *prev_count )
 {
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
@@ -397,23 +358,7 @@
 static NTSTATUS inproc_wait( DWORD count, const HANDLE *handles, BOOLEAN wait_any,
                              BOOLEAN alertable, const LARGE_INTEGER *timeout )
 {
-    struct inproc_sync *syncs[64], stack[ARRAY_SIZE(syncs)];
-    NTSTATUS ret;
-
     if (inproc_device_fd < 0) return STATUS_NOT_IMPLEMENTED;
-
-    assert( count <= ARRAY_SIZE(syncs) );
-    for (int i = 0; i < count; ++i)
-    {
-        if ((ret = get_inproc_sync( handles[i], stack + i )))
-        {
-            while (i--) release_inproc_sync( syncs[i] );
-            return ret;
-        }
-        syncs[i] = stack + i;
-    }
-
-    while (count--) release_inproc_sync( syncs[count] );
     return STATUS_NOT_IMPLEMENTED;
 }
 
--- b/dlls/ntdll/unix/unix_private.h
+++ a/dlls/ntdll/unix/unix_private.h
@@ -200,7 +200,6 @@
 extern int inproc_device_fd;
 extern timeout_t server_start_time;
 extern sigset_t server_block_set;
-extern pthread_mutex_t fd_cache_mutex;
 extern struct _KUSER_SHARED_DATA *user_shared_data;
 #ifdef __i386__
 extern struct ldt_copy __wine_ldt_copy;
--- b/include/wine/server_protocol.h
+++ a/include/wine/server_protocol.h
@@ -5956,26 +5956,6 @@
 };
 
 
-enum inproc_sync_type
-{
-    INPROC_SYNC_UNKNOWN = 0,
-    INPROC_SYNC_EVENT = 1,
-};
-
-
-struct get_inproc_sync_fd_request
-{
-    struct request_header __header;
-    obj_handle_t handle;
-};
-struct get_inproc_sync_fd_reply
-{
-    struct reply_header __header;
-    int           type;
-    char __pad_12[4];
-};
-
-
 enum request
 {
     REQ_new_process,
@@ -6275,7 +6255,6 @@
     REQ_get_next_process,
     REQ_get_next_thread,
     REQ_set_keyboard_repeat,
-    REQ_get_inproc_sync_fd,
     REQ_NB_REQUESTS
 };
 
@@ -6580,7 +6559,6 @@
     struct get_next_process_request get_next_process_request;
     struct get_next_thread_request get_next_thread_request;
     struct set_keyboard_repeat_request set_keyboard_repeat_request;
-    struct get_inproc_sync_fd_request get_inproc_sync_fd_request;
 };
 union generic_reply
 {
@@ -6883,9 +6861,8 @@
     struct get_next_process_reply get_next_process_reply;
     struct get_next_thread_reply get_next_thread_reply;
     struct set_keyboard_repeat_reply set_keyboard_repeat_reply;
-    struct get_inproc_sync_fd_reply get_inproc_sync_fd_reply;
 };
 
+#define SERVER_PROTOCOL_VERSION 891
-#define SERVER_PROTOCOL_VERSION 892
 
 #endif /* __WINE_WINE_SERVER_PROTOCOL_H */
--- b/server/inproc_sync.c
+++ a/server/inproc_sync.c
@@ -32,7 +32,6 @@
 #include "handle.h"
 #include "request.h"
 #include "thread.h"
-#include "user.h"
 
 #ifdef HAVE_LINUX_NTSYNC_H
 # include <linux/ntsync.h>
@@ -127,26 +126,6 @@
     close( sync->fd );
 }
 
-static int get_inproc_sync_fd( struct object *obj, int *type )
-{
-    struct object *sync;
-    int fd = -1;
-
-    if (obj != (struct object *)current->queue) sync = get_obj_sync( obj );
-    else sync = thread_queue_inproc_sync( current );
-    if (!sync) return -1;
-
-    if (sync->ops == &inproc_sync_ops)
-    {
-        struct inproc_sync *inproc = (struct inproc_sync *)sync;
-        *type = inproc->type;
-        fd = inproc->fd;
-    }
-
-    release_object( sync );
-    return fd;
-}
-
 #else /* NTSYNC_IOC_EVENT_READ */
 
 int get_inproc_device_fd(void)
@@ -167,22 +146,4 @@
 {
 }
 
-static int get_inproc_sync_fd( struct object *obj, int *type )
-{
-    return -1;
-}
-
 #endif /* NTSYNC_IOC_EVENT_READ */
-
-DECL_HANDLER(get_inproc_sync_fd)
-{
-    struct object *obj;
-    int fd;
-
-    if (!(obj = get_handle_obj( current->process, req->handle, 0, NULL ))) return;
-
-    if ((fd = get_inproc_sync_fd( obj, &reply->type )) < 0) set_error( STATUS_NOT_IMPLEMENTED );
-    else send_client_fd( current->process, fd, req->handle );
-
-    release_object( obj );
-}
--- b/server/object.h
+++ a/server/object.h
@@ -242,6 +242,12 @@
 
 /* in-process synchronization functions */
 
+enum inproc_sync_type
+{
+    INPROC_SYNC_UNKNOWN,
+    INPROC_SYNC_EVENT,
+};
+
 struct inproc_sync;
 extern int get_inproc_device_fd(void);
 extern struct inproc_sync *create_inproc_event_sync( int manual, int signaled );
--- b/server/protocol.def
+++ a/server/protocol.def
@@ -4092,7 +4092,7 @@
     obj_handle_t handle;       /* process handle */
 @END
 
+/* Itererate processes using global process list */
-/* Iterate processes using global process list */
 @REQ(get_next_process)
     obj_handle_t last;         /* process handle to start with */
     unsigned int access;       /* desired access for returned handle */
@@ -4122,17 +4122,3 @@
 @REPLY
     int enable;                /* previous state of auto-repeat enable */
 @END
-
-
-enum inproc_sync_type
-{
-    INPROC_SYNC_UNKNOWN = 0,
-    INPROC_SYNC_EVENT = 1,
-};
-
-/* Get the in-process synchronization fd associated with the waitable handle */
-@REQ(get_inproc_sync_fd)
-    obj_handle_t handle;        /* handle to the object */
-@REPLY
-    int           type;         /* inproc sync type */
-@END
--- b/server/queue.c
+++ a/server/queue.c
@@ -1492,12 +1492,6 @@
     return (create_msg_queue( thread, NULL ) != NULL);
 }
 
-struct object *thread_queue_inproc_sync( struct thread *thread )
-{
-    if (!thread->queue) return NULL;
-    return grab_object( thread->queue->inproc_sync );
-}
-
 /* attach two thread input data structures */
 int attach_thread_input( struct thread *thread_from, struct thread *thread_to )
 {
--- b/server/request_handlers.h
+++ a/server/request_handlers.h
@@ -304,7 +304,6 @@
 DECL_HANDLER(get_next_process);
 DECL_HANDLER(get_next_thread);
 DECL_HANDLER(set_keyboard_repeat);
-DECL_HANDLER(get_inproc_sync_fd);
 
 typedef void (*req_handler)( const void *req, void *reply );
 static const req_handler req_handlers[REQ_NB_REQUESTS] =
@@ -606,7 +605,6 @@
     (req_handler)req_get_next_process,
     (req_handler)req_get_next_thread,
     (req_handler)req_set_keyboard_repeat,
-    (req_handler)req_get_inproc_sync_fd,
 };
 
 C_ASSERT( sizeof(abstime_t) == 8 );
@@ -2294,7 +2292,3 @@
 C_ASSERT( sizeof(struct set_keyboard_repeat_request) == 24 );
 C_ASSERT( offsetof(struct set_keyboard_repeat_reply, enable) == 8 );
 C_ASSERT( sizeof(struct set_keyboard_repeat_reply) == 16 );
-C_ASSERT( offsetof(struct get_inproc_sync_fd_request, handle) == 12 );
-C_ASSERT( sizeof(struct get_inproc_sync_fd_request) == 16 );
-C_ASSERT( offsetof(struct get_inproc_sync_fd_reply, type) == 8 );
-C_ASSERT( sizeof(struct get_inproc_sync_fd_reply) == 16 );
--- b/server/request_trace.h
+++ a/server/request_trace.h
@@ -3384,16 +3384,6 @@
     fprintf( stderr, " enable=%d", req->enable );
 }
 
-static void dump_get_inproc_sync_fd_request( const struct get_inproc_sync_fd_request *req )
-{
-    fprintf( stderr, " handle=%04x", req->handle );
-}
-
-static void dump_get_inproc_sync_fd_reply( const struct get_inproc_sync_fd_reply *req )
-{
-    fprintf( stderr, " type=%d", req->type );
-}
-
 typedef void (*dump_func)( const void *req );
 
 static const dump_func req_dumpers[REQ_NB_REQUESTS] =
@@ -3695,7 +3685,6 @@
     (dump_func)dump_get_next_process_request,
     (dump_func)dump_get_next_thread_request,
     (dump_func)dump_set_keyboard_repeat_request,
-    (dump_func)dump_get_inproc_sync_fd_request,
 };
 
 static const dump_func reply_dumpers[REQ_NB_REQUESTS] =
@@ -3997,7 +3986,6 @@
     (dump_func)dump_get_next_process_reply,
     (dump_func)dump_get_next_thread_reply,
     (dump_func)dump_set_keyboard_repeat_reply,
-    (dump_func)dump_get_inproc_sync_fd_reply,
 };
 
 static const char * const req_names[REQ_NB_REQUESTS] =
@@ -4299,7 +4287,6 @@
     "get_next_process",
     "get_next_thread",
     "set_keyboard_repeat",
-    "get_inproc_sync_fd",
 };
 
 static const struct
--- b/server/user.h
+++ a/server/user.h
@@ -120,7 +120,6 @@
 extern void queue_cleanup_window( struct thread *thread, user_handle_t win );
 extern int init_thread_queue( struct thread *thread );
 extern void check_thread_queue_idle( struct thread *thread );
-extern struct object *thread_queue_inproc_sync( struct thread *thread );
 extern int attach_thread_input( struct thread *thread_from, struct thread *thread_to );
 extern void detach_thread_input( struct thread *thread_from );
 extern void set_clip_rectangle( struct desktop *desktop, const struct rectangle *rect,
