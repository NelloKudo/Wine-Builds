--- b/dlls/ntdll/unix/sync.c
+++ a/dlls/ntdll/unix/sync.c
@@ -310,7 +310,6 @@
 struct inproc_sync
 {
     int fd;
-    unsigned int access;
     unsigned int type : 2;
 };
 
@@ -319,7 +318,7 @@
     close( sync->fd );
 }
 
+static NTSTATUS get_inproc_sync( HANDLE handle, struct inproc_sync *sync )
-static NTSTATUS get_inproc_sync( HANDLE handle, ACCESS_MASK desired_access, struct inproc_sync *sync )
 {
     sigset_t sigset;
     NTSTATUS ret;
@@ -337,7 +336,6 @@
             obj_handle_t fd_handle;
             sync->fd = wine_server_receive_fd( &fd_handle );
             assert( wine_server_ptr_handle(fd_handle) == handle );
-            sync->access = reply->access;
             sync->type = reply->type;
         }
     }
@@ -345,14 +343,7 @@
 
     server_leave_uninterrupted_section( &fd_cache_mutex, &sigset );
 
+    return ret;
-    if (ret) return ret;
-    if ((sync->access & desired_access) != desired_access)
-    {
-        release_inproc_sync( sync );
-        return STATUS_ACCESS_DENIED;
-    }
-
-    return STATUS_SUCCESS;
 }
 
 static NTSTATUS inproc_release_semaphore( HANDLE handle, ULONG count, ULONG *prev_count )
@@ -414,7 +405,7 @@
     assert( count <= ARRAY_SIZE(syncs) );
     for (int i = 0; i < count; ++i)
     {
+        if ((ret = get_inproc_sync( handles[i], stack + i )))
-        if ((ret = get_inproc_sync( handles[i], SYNCHRONIZE, stack + i )))
         {
             while (i--) release_inproc_sync( syncs[i] );
             return ret;
--- b/include/wine/server_protocol.h
+++ a/include/wine/server_protocol.h
@@ -5972,7 +5972,7 @@
 {
     struct reply_header __header;
     int           type;
+    char __pad_12[4];
-    unsigned int access;
 };
 
 
@@ -6886,6 +6886,6 @@
     struct get_inproc_sync_fd_reply get_inproc_sync_fd_reply;
 };
 
+#define SERVER_PROTOCOL_VERSION 892
-#define SERVER_PROTOCOL_VERSION 893
 
 #endif /* __WINE_WINE_SERVER_PROTOCOL_H */
--- b/server/inproc_sync.c
+++ a/server/inproc_sync.c
@@ -181,8 +181,6 @@
 
     if (!(obj = get_handle_obj( current->process, req->handle, 0, NULL ))) return;
 
-    reply->access = get_handle_access( current->process, req->handle );
-
     if ((fd = get_inproc_sync_fd( obj, &reply->type )) < 0) set_error( STATUS_NOT_IMPLEMENTED );
     else send_client_fd( current->process, fd, req->handle );
 
--- b/server/protocol.def
+++ a/server/protocol.def
@@ -4135,5 +4135,4 @@
     obj_handle_t handle;        /* handle to the object */
 @REPLY
     int           type;         /* inproc sync type */
-    unsigned int access;        /* handle access rights */
 @END
--- b/server/request_handlers.h
+++ a/server/request_handlers.h
@@ -2297,5 +2297,4 @@
 C_ASSERT( offsetof(struct get_inproc_sync_fd_request, handle) == 12 );
 C_ASSERT( sizeof(struct get_inproc_sync_fd_request) == 16 );
 C_ASSERT( offsetof(struct get_inproc_sync_fd_reply, type) == 8 );
-C_ASSERT( offsetof(struct get_inproc_sync_fd_reply, access) == 12 );
 C_ASSERT( sizeof(struct get_inproc_sync_fd_reply) == 16 );
--- b/server/request_trace.h
+++ a/server/request_trace.h
@@ -3392,7 +3392,6 @@
 static void dump_get_inproc_sync_fd_reply( const struct get_inproc_sync_fd_reply *req )
 {
     fprintf( stderr, " type=%d", req->type );
-    fprintf( stderr, ", access=%08x", req->access );
 }
 
 typedef void (*dump_func)( const void *req );
