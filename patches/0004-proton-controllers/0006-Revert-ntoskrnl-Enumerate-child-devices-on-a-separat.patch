From 3d042453dbf162b212fc951e4b3b9b835d27daea Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 27 Jul 2023 09:23:05 +0200
Subject: [PATCH 0076/2043] Revert "ntoskrnl/tests: Fix a test failure."

This reverts commit 03034f2c0ef23964891d60e5995d167a113f2d3e.

CW-Bug-Id: #22500
---
 dlls/ntoskrnl.exe/tests/driver_pnp.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/dlls/ntoskrnl.exe/tests/driver_pnp.c b/dlls/ntoskrnl.exe/tests/driver_pnp.c
index 70678b1a45c..ae350451844 100644
--- a/dlls/ntoskrnl.exe/tests/driver_pnp.c
+++ b/dlls/ntoskrnl.exe/tests/driver_pnp.c
@@ -804,8 +804,7 @@ static NTSTATUS fdo_ioctl(IRP *irp, IO_STACK_LOCATION *stack, ULONG code)
              * handles to the device are closed (and the user-space thread is
              * currently blocked in this ioctl and won't close its handle
              * yet.) */
-            todo_wine_if (remove_device_count)
-                ok(!remove_device_count, "Got %u remove events.\n", remove_device_count);
+            ok(!remove_device_count, "Got %u remove events.\n", remove_device_count);
 
             return STATUS_SUCCESS;
         }
-- 
2.51.0

From fe9f1ff74947c73644f4e858bfc4f29a854c5118 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 27 Jul 2023 09:23:11 +0200
Subject: [PATCH 0077/2043] Revert "ntoskrnl: Enumerate child devices on a
 separate thread."

This reverts commit 9fbdf2b43435caf62742d997bf8b3fb8752f606c.

CW-Bug-Id: #22500
---
 dlls/ntoskrnl.exe/ntoskrnl_private.h |  1 -
 dlls/ntoskrnl.exe/pnp.c              | 40 +---------------------------
 dlls/ntoskrnl.exe/tests/driver_pnp.c | 10 +++----
 3 files changed, 6 insertions(+), 45 deletions(-)

diff --git a/dlls/ntoskrnl.exe/ntoskrnl_private.h b/dlls/ntoskrnl.exe/ntoskrnl_private.h
index 472dc46fde3..ad53ee181a5 100644
--- a/dlls/ntoskrnl.exe/ntoskrnl_private.h
+++ b/dlls/ntoskrnl.exe/ntoskrnl_private.h
@@ -22,7 +22,6 @@
 #define __WINE_NTOSKRNL_PRIVATE_H
 
 #include <stdarg.h>
-#include <stdbool.h>
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
 #include "windef.h"
diff --git a/dlls/ntoskrnl.exe/pnp.c b/dlls/ntoskrnl.exe/pnp.c
index f887bfc619d..67c9e5dbe05 100644
--- a/dlls/ntoskrnl.exe/pnp.c
+++ b/dlls/ntoskrnl.exe/pnp.c
@@ -36,12 +36,6 @@ DEFINE_GUID(GUID_NULL,0,0,0,0,0,0,0,0,0,0,0);
 
 WINE_DEFAULT_DEBUG_CHANNEL(plugplay);
 
-DECLARE_CRITICAL_SECTION(invalidated_devices_cs);
-static CONDITION_VARIABLE invalidated_devices_cv = CONDITION_VARIABLE_INIT;
-
-static DEVICE_OBJECT **invalidated_devices;
-static size_t invalidated_devices_count;
-
 static inline const char *debugstr_propkey( const DEVPROPKEY *id )
 {
     if (!id) return "(null)";
@@ -489,14 +483,8 @@ void WINAPI IoInvalidateDeviceRelations( DEVICE_OBJECT *device_object, DEVICE_RE
     switch (type)
     {
         case BusRelations:
-            EnterCriticalSection( &invalidated_devices_cs );
-            invalidated_devices = realloc( invalidated_devices,
-                    (invalidated_devices_count + 1) * sizeof(*invalidated_devices) );
-            invalidated_devices[invalidated_devices_count++] = device_object;
-            LeaveCriticalSection( &invalidated_devices_cs );
-            WakeConditionVariable( &invalidated_devices_cv );
+            handle_bus_relations( device_object );
             break;
-
         default:
             FIXME("Unhandled relation %#x.\n", type);
             break;
@@ -1228,30 +1216,6 @@ static NTSTATUS WINAPI pnp_manager_driver_entry( DRIVER_OBJECT *driver, UNICODE_
     return STATUS_SUCCESS;
 }
 
-static DWORD CALLBACK device_enum_thread_proc(void *arg)
-{
-    for (;;)
-    {
-        DEVICE_OBJECT *device;
-
-        EnterCriticalSection( &invalidated_devices_cs );
-
-        while (!invalidated_devices_count)
-            SleepConditionVariableCS( &invalidated_devices_cv, &invalidated_devices_cs, INFINITE );
-
-        device = invalidated_devices[--invalidated_devices_count];
-
-        /* Don't hold the CS while enumerating the device. Tests show that
-         * calling IoInvalidateDeviceRelations() from another thread shouldn't
-         * block, even if this thread is blocked in an IRP handler. */
-        LeaveCriticalSection( &invalidated_devices_cs );
-
-        handle_bus_relations( device );
-    }
-
-    return 0;
-}
-
 void pnp_manager_start(void)
 {
     WCHAR endpoint[] = L"\\pipe\\wine_plugplay";
@@ -1273,8 +1237,6 @@ void pnp_manager_start(void)
     RpcStringFreeW( &binding_str );
     if (err)
         ERR("RpcBindingFromStringBinding() failed, error %#lx\n", err);
-
-    CreateThread( NULL, 0, device_enum_thread_proc, NULL, 0, NULL );
 }
 
 void pnp_manager_stop_driver( struct wine_driver *driver )
diff --git a/dlls/ntoskrnl.exe/tests/driver_pnp.c b/dlls/ntoskrnl.exe/tests/driver_pnp.c
index ae350451844..eb0f469ebbe 100644
--- a/dlls/ntoskrnl.exe/tests/driver_pnp.c
+++ b/dlls/ntoskrnl.exe/tests/driver_pnp.c
@@ -301,11 +301,11 @@ static NTSTATUS pdo_pnp(DEVICE_OBJECT *device_obj, IRP *irp)
             device->power_state = PowerDeviceD0;
 
             status = ZwWaitForSingleObject(device->plug_event, TRUE, &wait_time);
-            ok(!status, "Failed to wait for child plug event, status %#lx.\n", status);
+            todo_wine ok(!status, "Failed to wait for child plug event, status %#lx.\n", status);
             status = ZwSetEvent(device->plug_event2, NULL);
             ok(!status, "Failed to set event, status %#lx.\n", status);
             status = ZwWaitForSingleObject(device->plug_event, TRUE, &wait_time);
-            ok(!status, "Failed to wait for child plug event, status %#lx.\n", status);
+            todo_wine ok(!status, "Failed to wait for child plug event, status %#lx.\n", status);
 
             ret = STATUS_SUCCESS;
             break;
@@ -796,15 +796,15 @@ static NTSTATUS fdo_ioctl(IRP *irp, IO_STACK_LOCATION *stack, ULONG code)
              * for the other. */
 
             status = ZwSetEvent(plug_event, NULL);
-            ok(!status, "Failed to set event, status %#lx.\n", status);
+            todo_wine ok(!status, "Failed to set event, status %#lx.\n", status);
             status = ZwWaitForSingleObject(plug_event2, TRUE, &wait_time);
-            ok(!status, "Failed to wait for child plug event, status %#lx.\n", status);
+            todo_wine ok(!status, "Failed to wait for child plug event, status %#lx.\n", status);
             ok(surprise_removal_count == 1, "Got %u surprise removal events.\n", surprise_removal_count);
             /* We shouldn't get IRP_MN_REMOVE_DEVICE until all user-space
              * handles to the device are closed (and the user-space thread is
              * currently blocked in this ioctl and won't close its handle
              * yet.) */
-            ok(!remove_device_count, "Got %u remove events.\n", remove_device_count);
+            todo_wine ok(!remove_device_count, "Got %u remove events.\n", remove_device_count);
 
             return STATUS_SUCCESS;
         }
-- 
2.51.0

