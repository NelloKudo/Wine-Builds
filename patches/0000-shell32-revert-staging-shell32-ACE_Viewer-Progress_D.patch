From f9b927ab128b5b288eaab2aa93e412d760218b76 Mon Sep 17 00:00:00 2001
From: NelloKudo <marshnelloosu@gmail.com>
Date: Tue, 1 Jul 2025 21:20:27 +0200
Subject: [PATCH] shell32: revert staging shell32-ACE_Viewer/Progress_Dialog
 patchsets

Needed to backport the latest fixes to shell32, both of those patchsets
were disabled in Wine-Staging ever since.
---
 dlls/shell32/Makefile.in     |    2 +-
 dlls/shell32/shell32.rc      |   34 -
 dlls/shell32/shlfileop.c     | 1132 +++++++++++++---------------------
 dlls/shell32/shlview_cmenu.c |  383 ------------
 dlls/shell32/shresdef.h      |   35 --
 5 files changed, 437 insertions(+), 1149 deletions(-)

diff --git a/dlls/shell32/Makefile.in b/dlls/shell32/Makefile.in
index 828d8e82e2d..5d0db8a8b07 100644
--- a/dlls/shell32/Makefile.in
+++ b/dlls/shell32/Makefile.in
@@ -1,7 +1,7 @@
 EXTRADEFS = -D_SHELL32_
 MODULE    = shell32.dll
 IMPORTLIB = shell32
-IMPORTS   = uuid shlwapi user32 gdi32 advapi32 aclui
+IMPORTS   = uuid shlwapi user32 gdi32 advapi32
 DELAYIMPORTS = ole32 oleaut32 shdocvw version comctl32 comdlg32 gdiplus
 
 SOURCES = \
diff --git a/dlls/shell32/shell32.rc b/dlls/shell32/shell32.rc
index 95e6642c3ef..b054f55ba9d 100644
--- a/dlls/shell32/shell32.rc
+++ b/dlls/shell32/shell32.rc
@@ -184,13 +184,6 @@ If the files in the destination folder have the same names as files in the\n\
 selected folder they will be replaced. Do you still want to move or copy\n\
 the folder?"
 
-        IDS_FILEOP_COPYING   "Copying"
-        IDS_FILEOP_MOVING    "Moving"
-        IDS_FILEOP_DELETING  "Deleting"
-        IDS_FILEOP_FROM_TO   "From %1 to %2"
-        IDS_FILEOP_FROM      "From %1"
-        IDS_FILEOP_PREFLIGHT "Preflight"
-
         /* message box strings */
         IDS_RESTART_TITLE       "Restart"
         IDS_RESTART_PROMPT      "Do you want to simulate a Windows reboot?"
@@ -204,33 +197,6 @@ the folder?"
         IDS_RUNDLG_BROWSE_FILTER_EXE "Executable files (*.exe)"
         IDS_RUNDLG_BROWSE_FILTER_ALL "All files (*.*)"
 
-        /* Security dialog - General */
-        IDS_SECURITY_ALL_ACCESS "Full Control"
-        IDS_SECURITY_MODIFY     "Modify"
-        IDS_SECURITY_READ_EXEC  "Read & Execute"
-        IDS_SECURITY_READ       "Read"
-        IDS_SECURITY_WRITE      "Write"
-        IDS_SECURITY_DIR_LIST   "List Folder Contents"
-
-        /* Security dialog - Advanced */
-        IDS_SECURITY_TRAVERSE      "Traverse Folder"
-        IDS_SECURITY_EXECUTE       "Execute File"
-        IDS_SECURITY_LIST_FOLDER   "List Folder"
-        IDS_SECURITY_READ_DATA     "Read Data"
-        IDS_SECURITY_READ_ATTR     "Read Attributes"
-        IDS_SECURITY_READ_EX_ATTR  "Read Extended Attributes"
-        IDS_SECURITY_CREATE_FILES  "Create Files"
-        IDS_SECURITY_WRITE_DATA    "Write Data"
-        IDS_SEUCRITY_CREATE_FOLDER "Create Folders"
-        IDS_SECURITY_APPEND_DATA   "Append Data"
-        IDS_SECURITY_WRITE_ATTR    "Write Attributes"
-        IDS_SECURITY_WRITE_EX_ATTR "Write Extended Attributes"
-        IDS_SECURITY_DELETE_CHILD  "Delete Subfolders and Files"
-        IDS_SECURITY_DELETE        "Delete"
-        IDS_SECURITY_READ_PERM     "Read Permissions"
-        IDS_SECURITY_CHANGE_PERM   "Change Permissions"
-        IDS_SECURITY_CHANGE_OWNER  "Take Ownership"
-
         /* shell folder path default values */
 	/* FIXME: Some will be unused until desktop.ini support is implemented */
 	IDS_PROGRAMS                "Programs"
diff --git a/dlls/shell32/shlfileop.c b/dlls/shell32/shlfileop.c
index b5c016998ed..4fb0642fc5d 100644
--- a/dlls/shell32/shlfileop.c
+++ b/dlls/shell32/shlfileop.c
@@ -57,60 +57,24 @@ WINE_DEFAULT_DEBUG_CHANNEL(shell);
 #define DE_SAMEFILE      0x71
 #define DE_DESTSAMETREE  0x7D
 
+static DWORD SHNotifyCreateDirectoryA(LPCSTR path, LPSECURITY_ATTRIBUTES sec);
+static DWORD SHNotifyCreateDirectoryW(LPCWSTR path, LPSECURITY_ATTRIBUTES sec);
+static DWORD SHNotifyRemoveDirectoryA(LPCSTR path);
+static DWORD SHNotifyRemoveDirectoryW(LPCWSTR path);
+static DWORD SHNotifyDeleteFileA(LPCSTR path);
+static DWORD SHNotifyDeleteFileW(LPCWSTR path);
+static DWORD SHNotifyMoveFileW(LPCWSTR src, LPCWSTR dest);
+static DWORD SHNotifyCopyFileW(LPCWSTR src, LPCWSTR dest, BOOL bFailIfExists);
+static DWORD SHFindAttrW(LPCWSTR pName, BOOL fileOnly);
+
 typedef struct
 {
     SHFILEOPSTRUCTW *req;
     DWORD dwYesToAllMask;
     BOOL bManyItems;
     BOOL bCancelled;
-    IProgressDialog *progress;
-    ULARGE_INTEGER completedSize;
-    ULARGE_INTEGER totalSize;
-    WCHAR szBuilderString[64];
 } FILE_OPERATION;
 
-typedef struct
-{
-    DWORD attributes;
-    LPWSTR szDirectory;
-    LPWSTR szFilename;
-    LPWSTR szFullPath;
-    BOOL bFromWildcard;
-    BOOL bFromRelative;
-    BOOL bExists;
-} FILE_ENTRY;
-
-typedef struct
-{
-    FILE_ENTRY *feFiles;
-    DWORD num_alloc;
-    DWORD dwNumFiles;
-    BOOL bAnyFromWildcard;
-    BOOL bAnyDirectories;
-    BOOL bAnyDontExist;
-} FILE_LIST;
-
-#define ERROR_SHELL_INTERNAL_FILE_NOT_FOUND 1026
-
-static DWORD SHNotifyCreateDirectoryA(LPCSTR path, LPSECURITY_ATTRIBUTES sec);
-static DWORD SHNotifyCreateDirectoryW(LPCWSTR path, LPSECURITY_ATTRIBUTES sec);
-static DWORD SHNotifyRemoveDirectoryA(LPCSTR path);
-static DWORD SHNotifyRemoveDirectoryW(LPCWSTR path);
-static DWORD SHNotifyDeleteFileA(FILE_OPERATION *op, LPCSTR path);
-static DWORD SHNotifyDeleteFileW(FILE_OPERATION *op, LPCWSTR path);
-static DWORD SHNotifyMoveFileW(FILE_OPERATION *op, LPCWSTR src, LPCWSTR dest);
-static DWORD SHNotifyCopyFileW(FILE_OPERATION *op, LPCWSTR src, LPCWSTR dest, BOOL bFailIfExists);
-static DWORD SHFindAttrW(LPCWSTR pName, BOOL fileOnly);
-
-static int copy_files(FILE_OPERATION *op, BOOL multidest, const FILE_LIST *flFrom, FILE_LIST *flTo);
-static int move_files(FILE_OPERATION *op, BOOL multidest, const FILE_LIST *flFrom, const FILE_LIST *flTo);
-
-static void progressbar_calc_totalsize(FILE_OPERATION *op, const FILE_LIST *from);
-static void progressbar_update_title(FILE_OPERATION *op);
-static void progressbar_update_files(FILE_OPERATION *op, LPCWSTR src, LPCWSTR dst);
-static DWORD CALLBACK progressbar_copy_routine(LARGE_INTEGER total_size, LARGE_INTEGER total_transferred, LARGE_INTEGER stream_size,
-        LARGE_INTEGER stream_transferred, DWORD stream_number, DWORD reason, HANDLE src_file, HANDLE dst_file, LPVOID user);
-
 /* Confirm dialogs with an optional "Yes To All" as used in file operations confirmations
  */
 struct confirm_msg_info
@@ -238,107 +202,108 @@ static int SHELL_ConfirmMsgBox(HWND hWnd, LPWSTR lpszText, LPWSTR lpszCaption, H
 /* confirmation dialogs content */
 typedef struct
 {
-    HINSTANCE hIconInstance;
-    UINT icon_resource_id;
-    UINT caption_resource_id, text_resource_id;
+        HINSTANCE hIconInstance;
+        UINT icon_resource_id;
+	UINT caption_resource_id, text_resource_id;
 } SHELL_ConfirmIDstruc;
 
 static BOOL SHELL_ConfirmIDs(int nKindOfDialog, SHELL_ConfirmIDstruc *ids)
 {
-    ids->hIconInstance = shell32_hInstance;
-    switch (nKindOfDialog) {
-        case ASK_DELETE_FILE:
-             ids->icon_resource_id = IDI_SHELL_CONFIRM_DELETE;
-            ids->caption_resource_id  = IDS_DELETEITEM_CAPTION;
-            ids->text_resource_id  = IDS_DELETEITEM_TEXT;
+        ids->hIconInstance = shell32_hInstance;
+	switch (nKindOfDialog) {
+	  case ASK_DELETE_FILE:
+            ids->icon_resource_id = IDI_SHELL_CONFIRM_DELETE;
+	    ids->caption_resource_id  = IDS_DELETEITEM_CAPTION;
+	    ids->text_resource_id  = IDS_DELETEITEM_TEXT;
+	    return TRUE;
+	  case ASK_DELETE_FOLDER:
+            ids->icon_resource_id = IDI_SHELL_CONFIRM_DELETE;
+	    ids->caption_resource_id  = IDS_DELETEFOLDER_CAPTION;
+	    ids->text_resource_id  = IDS_DELETEITEM_TEXT;
+	    return TRUE;
+	  case ASK_DELETE_MULTIPLE_ITEM:
+            ids->icon_resource_id = IDI_SHELL_CONFIRM_DELETE;
+	    ids->caption_resource_id  = IDS_DELETEITEM_CAPTION;
+	    ids->text_resource_id  = IDS_DELETEMULTIPLE_TEXT;
+	    return TRUE;
+          case ASK_TRASH_FILE:
+            ids->icon_resource_id = IDI_SHELL_TRASH_FILE;
+            ids->caption_resource_id = IDS_DELETEITEM_CAPTION;
+            ids->text_resource_id = IDS_TRASHITEM_TEXT;
+            return TRUE;
+          case ASK_TRASH_FOLDER:
+            ids->icon_resource_id = IDI_SHELL_TRASH_FILE;
+            ids->caption_resource_id = IDS_DELETEFOLDER_CAPTION;
+            ids->text_resource_id = IDS_TRASHFOLDER_TEXT;
             return TRUE;
-        case ASK_DELETE_FOLDER:
-             ids->icon_resource_id = IDI_SHELL_CONFIRM_DELETE;
-            ids->caption_resource_id  = IDS_DELETEFOLDER_CAPTION;
-            ids->text_resource_id  = IDS_DELETEITEM_TEXT;
+          case ASK_TRASH_MULTIPLE_ITEM:
+            ids->icon_resource_id = IDI_SHELL_TRASH_FILE;
+            ids->caption_resource_id = IDS_DELETEITEM_CAPTION;
+            ids->text_resource_id = IDS_TRASHMULTIPLE_TEXT;
             return TRUE;
-        case ASK_DELETE_MULTIPLE_ITEM:
-             ids->icon_resource_id = IDI_SHELL_CONFIRM_DELETE;
+          case ASK_CANT_TRASH_ITEM:
+            ids->icon_resource_id = IDI_SHELL_CONFIRM_DELETE;
             ids->caption_resource_id  = IDS_DELETEITEM_CAPTION;
-            ids->text_resource_id  = IDS_DELETEMULTIPLE_TEXT;
+            ids->text_resource_id  = IDS_CANTTRASH_TEXT;
             return TRUE;
-        case ASK_TRASH_FILE:
-             ids->icon_resource_id = IDI_SHELL_TRASH_FILE;
-             ids->caption_resource_id = IDS_DELETEITEM_CAPTION;
-             ids->text_resource_id = IDS_TRASHITEM_TEXT;
-             return TRUE;
-        case ASK_TRASH_FOLDER:
-             ids->icon_resource_id = IDI_SHELL_TRASH_FILE;
-             ids->caption_resource_id = IDS_DELETEFOLDER_CAPTION;
-             ids->text_resource_id = IDS_TRASHFOLDER_TEXT;
-             return TRUE;
-        case ASK_TRASH_MULTIPLE_ITEM:
-             ids->icon_resource_id = IDI_SHELL_TRASH_FILE;
-             ids->caption_resource_id = IDS_DELETEITEM_CAPTION;
-             ids->text_resource_id = IDS_TRASHMULTIPLE_TEXT;
-             return TRUE;
-        case ASK_CANT_TRASH_ITEM:
-             ids->icon_resource_id = IDI_SHELL_CONFIRM_DELETE;
-             ids->caption_resource_id  = IDS_DELETEITEM_CAPTION;
-             ids->text_resource_id  = IDS_CANTTRASH_TEXT;
-             return TRUE;
-        case ASK_DELETE_SELECTED:
-             ids->icon_resource_id = IDI_SHELL_CONFIRM_DELETE;
-             ids->caption_resource_id  = IDS_DELETEITEM_CAPTION;
-             ids->text_resource_id  = IDS_DELETESELECTED_TEXT;
-             return TRUE;
-        case ASK_OVERWRITE_FILE:
-             ids->hIconInstance = NULL;
-             ids->icon_resource_id = IDI_WARNING;
-             ids->caption_resource_id  = IDS_OVERWRITEFILE_CAPTION;
-             ids->text_resource_id  = IDS_OVERWRITEFILE_TEXT;
-             return TRUE;
-        case ASK_OVERWRITE_FOLDER:
-             ids->hIconInstance = NULL;
-             ids->icon_resource_id = IDI_WARNING;
-             ids->caption_resource_id  = IDS_OVERWRITEFILE_CAPTION;
-             ids->text_resource_id  = IDS_OVERWRITEFOLDER_TEXT;
-             return TRUE;
-        default:
-            FIXME(" Unhandled nKindOfDialog %d stub\n", nKindOfDialog);
-   }
-   return FALSE;
+	  case ASK_DELETE_SELECTED:
+            ids->icon_resource_id = IDI_SHELL_CONFIRM_DELETE;
+            ids->caption_resource_id  = IDS_DELETEITEM_CAPTION;
+            ids->text_resource_id  = IDS_DELETESELECTED_TEXT;
+            return TRUE;
+	  case ASK_OVERWRITE_FILE:
+            ids->hIconInstance = NULL;
+            ids->icon_resource_id = IDI_WARNING;
+	    ids->caption_resource_id  = IDS_OVERWRITEFILE_CAPTION;
+	    ids->text_resource_id  = IDS_OVERWRITEFILE_TEXT;
+            return TRUE;
+	  case ASK_OVERWRITE_FOLDER:
+            ids->hIconInstance = NULL;
+            ids->icon_resource_id = IDI_WARNING;
+            ids->caption_resource_id  = IDS_OVERWRITEFILE_CAPTION;
+            ids->text_resource_id  = IDS_OVERWRITEFOLDER_TEXT;
+            return TRUE;
+	  default:
+	    FIXME(" Unhandled nKindOfDialog %d stub\n", nKindOfDialog);
+	}
+	return FALSE;
 }
 
 static BOOL SHELL_ConfirmDialogW(HWND hWnd, int nKindOfDialog, LPCWSTR szDir, FILE_OPERATION *op)
 {
-    WCHAR szCaption[255], szText[255], szBuffer[MAX_PATH + 256];
-    SHELL_ConfirmIDstruc ids;
-    DWORD_PTR args[1];
-    HICON hIcon;
-    int ret;
+	WCHAR szCaption[255], szText[255], szBuffer[MAX_PATH + 256];
+	SHELL_ConfirmIDstruc ids;
+	DWORD_PTR args[1];
+	HICON hIcon;
+	int ret;
 
-    assert(nKindOfDialog >= 0 && nKindOfDialog < 32);
-    if (op && (op->dwYesToAllMask & (1 << nKindOfDialog)))
-        return TRUE;
-
-    if (!SHELL_ConfirmIDs(nKindOfDialog, &ids)) return FALSE;
-
-    LoadStringW(shell32_hInstance, ids.caption_resource_id, szCaption, ARRAY_SIZE(szCaption));
-    LoadStringW(shell32_hInstance, ids.text_resource_id, szText, ARRAY_SIZE(szText));
-
-    args[0] = (DWORD_PTR)szDir;
-    FormatMessageW(FORMAT_MESSAGE_FROM_STRING|FORMAT_MESSAGE_ARGUMENT_ARRAY,
-        szText, 0, 0, szBuffer, ARRAY_SIZE(szBuffer), (va_list*)args);
-    hIcon = LoadIconW(ids.hIconInstance, (LPWSTR)MAKEINTRESOURCE(ids.icon_resource_id));
-
-    ret = SHELL_ConfirmMsgBox(hWnd, szBuffer, szCaption, hIcon, op && op->bManyItems);
-    if (op) {
-        if (ret == IDD_YESTOALL) {
-            op->dwYesToAllMask |= (1 << nKindOfDialog);
-            ret = IDYES;
-         }
-        if (ret == IDCANCEL)
-            op->bCancelled = TRUE;
-        if (ret != IDYES)
-            op->req->fAnyOperationsAborted = TRUE;
-    }
-    return ret == IDYES;
+        assert(nKindOfDialog >= 0 && nKindOfDialog < 32);
+        if (op && (op->dwYesToAllMask & (1 << nKindOfDialog)))
+            return TRUE;
+
+        if (!SHELL_ConfirmIDs(nKindOfDialog, &ids)) return FALSE;
+
+        LoadStringW(shell32_hInstance, ids.caption_resource_id, szCaption, ARRAY_SIZE(szCaption));
+        LoadStringW(shell32_hInstance, ids.text_resource_id, szText, ARRAY_SIZE(szText));
+
+        args[0] = (DWORD_PTR)szDir;
+        FormatMessageW(FORMAT_MESSAGE_FROM_STRING|FORMAT_MESSAGE_ARGUMENT_ARRAY,
+            szText, 0, 0, szBuffer, ARRAY_SIZE(szBuffer), (va_list*)args);
+
+        hIcon = LoadIconW(ids.hIconInstance, (LPWSTR)MAKEINTRESOURCE(ids.icon_resource_id));
+
+        ret = SHELL_ConfirmMsgBox(hWnd, szBuffer, szCaption, hIcon, op && op->bManyItems);
+        if (op) {
+            if (ret == IDD_YESTOALL) {
+                op->dwYesToAllMask |= (1 << nKindOfDialog);
+                ret = IDYES;
+            }
+            if (ret == IDCANCEL)
+                op->bCancelled = TRUE;
+            if (ret != IDYES)
+                op->req->fAnyOperationsAborted = TRUE;
+        }
+        return ret == IDYES;
 }
 
 BOOL SHELL_ConfirmYesNoW(HWND hWnd, int nKindOfDialog, LPCWSTR szDir)
@@ -348,18 +313,18 @@ BOOL SHELL_ConfirmYesNoW(HWND hWnd, int nKindOfDialog, LPCWSTR szDir)
 
 static DWORD SHELL32_AnsiToUnicodeBuf(LPCSTR aPath, LPWSTR *wPath, DWORD minChars)
 {
-    DWORD len = MultiByteToWideChar(CP_ACP, 0, aPath, -1, NULL, 0);
+	DWORD len = MultiByteToWideChar(CP_ACP, 0, aPath, -1, NULL, 0);
 
-    if (len < minChars)
-      len = minChars;
+	if (len < minChars)
+	  len = minChars;
 
-    *wPath = malloc(len * sizeof(WCHAR));
-    if (*wPath)
-    {
-        MultiByteToWideChar(CP_ACP, 0, aPath, -1, *wPath, len);
-        return NO_ERROR;
-    }
-    return E_OUTOFMEMORY;
+	*wPath = malloc(len * sizeof(WCHAR));
+	if (*wPath)
+	{
+	  MultiByteToWideChar(CP_ACP, 0, aPath, -1, *wPath, len);
+	  return NO_ERROR;
+	}
+	return E_OUTOFMEMORY;
 }
 
 HRESULT WINAPI SHIsFileAvailableOffline(LPCWSTR path, LPDWORD status)
@@ -374,7 +339,7 @@ HRESULT WINAPI SHIsFileAvailableOffline(LPCWSTR path, LPDWORD status)
  * Asks for confirmation when bShowUI is true and deletes the directory and
  * all its subdirectories and files if necessary.
  */
-static DWORD SHELL_DeleteDirectoryW(FILE_OPERATION *op, LPCWSTR pszDir, BOOL bShowUI)
+static DWORD SHELL_DeleteDirectoryW(HWND hwnd, LPCWSTR pszDir, BOOL bShowUI)
 {
     DWORD    ret = 0;
     HANDLE  hFind;
@@ -384,25 +349,16 @@ static DWORD SHELL_DeleteDirectoryW(FILE_OPERATION *op, LPCWSTR pszDir, BOOL bSh
     PathCombineW(szTemp, pszDir, L"*");
     hFind = FindFirstFileW(szTemp, &wfd);
 
-    if (hFind != INVALID_HANDLE_VALUE)
-    {
-        if (!bShowUI || SHELL_ConfirmDialogW(op->req->hwnd, ASK_DELETE_FOLDER, pszDir, NULL))
-        {
+    if (hFind != INVALID_HANDLE_VALUE) {
+        if (!bShowUI || SHELL_ConfirmDialogW(hwnd, ASK_DELETE_FOLDER, pszDir, NULL)) {
             do {
                 if (IsDotDir(wfd.cFileName))
                     continue;
                 PathCombineW(szTemp, pszDir, wfd.cFileName);
                 if (FILE_ATTRIBUTE_DIRECTORY & wfd.dwFileAttributes)
-                    ret = SHELL_DeleteDirectoryW(op, szTemp, FALSE);
+                    ret = SHELL_DeleteDirectoryW(hwnd, szTemp, FALSE);
                 else
-                    ret = SHNotifyDeleteFileW(op, szTemp);
-
-                /* Check if dialog was cancelled in the meantime */
-                if (op->progress != NULL)
-                    op->bCancelled |= IProgressDialog_HasUserCancelled(op->progress);
-                if (op->bCancelled)
-                    break;
-
+                    ret = SHNotifyDeleteFileW(szTemp);
             } while (!ret && FindNextFileW(hFind, &wfd));
         }
         FindClose(hFind);
@@ -411,8 +367,8 @@ static DWORD SHELL_DeleteDirectoryW(FILE_OPERATION *op, LPCWSTR pszDir, BOOL bSh
         ret = SHNotifyRemoveDirectoryW(pszDir);
 
     return ret == ERROR_PATH_NOT_FOUND ?
-                  0x7C: /* DE_INVALIDFILES (legacy Windows error) */
-                  ret;
+        0x7C: /* DE_INVALIDFILES (legacy Windows error) */
+        ret;
 }
 
 /**************************************************************************
@@ -432,41 +388,41 @@ static DWORD SHELL_DeleteDirectoryW(FILE_OPERATION *op, LPCWSTR pszDir, BOOL bSh
  */
 static DWORD SHNotifyCreateDirectoryA(LPCSTR path, LPSECURITY_ATTRIBUTES sec)
 {
-    LPWSTR wPath;
-    DWORD retCode;
+	LPWSTR wPath;
+	DWORD retCode;
 
-    TRACE("(%s, %p)\n", debugstr_a(path), sec);
+	TRACE("(%s, %p)\n", debugstr_a(path), sec);
 
-    retCode = SHELL32_AnsiToUnicodeBuf(path, &wPath, 0);
-    if (!retCode)
-    {
-        retCode = SHNotifyCreateDirectoryW(wPath, sec);
-        free(wPath);
-    }
-    return retCode;
+	retCode = SHELL32_AnsiToUnicodeBuf(path, &wPath, 0);
+	if (!retCode)
+	{
+	  retCode = SHNotifyCreateDirectoryW(wPath, sec);
+	  free(wPath);
+	}
+	return retCode;
 }
 
 /**********************************************************************/
 
 static DWORD SHNotifyCreateDirectoryW(LPCWSTR path, LPSECURITY_ATTRIBUTES sec)
 {
-    TRACE("(%s, %p)\n", debugstr_w(path), sec);
+	TRACE("(%s, %p)\n", debugstr_w(path), sec);
 
-    if (CreateDirectoryW(path, sec))
-    {
-        SHChangeNotify(SHCNE_MKDIR, SHCNF_PATHW, path, NULL);
-        return ERROR_SUCCESS;
-    }
-    return GetLastError();
+	if (CreateDirectoryW(path, sec))
+	{
+	  SHChangeNotify(SHCNE_MKDIR, SHCNF_PATHW, path, NULL);
+	  return ERROR_SUCCESS;
+	}
+	return GetLastError();
 }
 
 /**********************************************************************/
 
 BOOL WINAPI Win32CreateDirectoryAW(LPCVOID path, LPSECURITY_ATTRIBUTES sec)
 {
-    if (SHELL_OsIsUnicode())
-        return (SHNotifyCreateDirectoryW(path, sec) == ERROR_SUCCESS);
-    return (SHNotifyCreateDirectoryA(path, sec) == ERROR_SUCCESS);
+	if (SHELL_OsIsUnicode())
+	  return (SHNotifyCreateDirectoryW(path, sec) == ERROR_SUCCESS);
+	return (SHNotifyCreateDirectoryA(path, sec) == ERROR_SUCCESS);
 }
 
 /************************************************************************
@@ -486,125 +442,116 @@ BOOL WINAPI Win32CreateDirectoryAW(LPCVOID path, LPSECURITY_ATTRIBUTES sec)
  */
 static DWORD SHNotifyRemoveDirectoryA(LPCSTR path)
 {
-    LPWSTR wPath;
-    DWORD retCode;
+	LPWSTR wPath;
+	DWORD retCode;
 
-    TRACE("(%s)\n", debugstr_a(path));
+	TRACE("(%s)\n", debugstr_a(path));
 
-    retCode = SHELL32_AnsiToUnicodeBuf(path, &wPath, 0);
-    if (!retCode)
-    {
-        retCode = SHNotifyRemoveDirectoryW(wPath);
-        free(wPath);
-    }
-    return retCode;
+	retCode = SHELL32_AnsiToUnicodeBuf(path, &wPath, 0);
+	if (!retCode)
+	{
+	  retCode = SHNotifyRemoveDirectoryW(wPath);
+	  free(wPath);
+	}
+	return retCode;
 }
 
 /***********************************************************************/
 
 static DWORD SHNotifyRemoveDirectoryW(LPCWSTR path)
 {
-    BOOL ret;
-    TRACE("(%s)\n", debugstr_w(path));
+	BOOL ret;
+	TRACE("(%s)\n", debugstr_w(path));
 
-    ret = RemoveDirectoryW(path);
-    if (!ret)
-    {
-        /* Directory may be write protected */
-        DWORD dwAttr = GetFileAttributesW(path);
-        if (IsAttrib(dwAttr, FILE_ATTRIBUTE_READONLY))
-            if (SetFileAttributesW(path, dwAttr & ~FILE_ATTRIBUTE_READONLY))
-                ret = RemoveDirectoryW(path);
-    }
-    if (ret)
-    {
-        SHChangeNotify(SHCNE_RMDIR, SHCNF_PATHW, path, NULL);
-        return ERROR_SUCCESS;
-    }
-    return GetLastError();
+	ret = RemoveDirectoryW(path);
+	if (!ret)
+	{
+	  /* Directory may be write protected */
+	  DWORD dwAttr = GetFileAttributesW(path);
+	  if (IsAttrib(dwAttr, FILE_ATTRIBUTE_READONLY))
+	    if (SetFileAttributesW(path, dwAttr & ~FILE_ATTRIBUTE_READONLY))
+	      ret = RemoveDirectoryW(path);
+	}
+	if (ret)
+	{
+	  SHChangeNotify(SHCNE_RMDIR, SHCNF_PATHW, path, NULL);
+	  return ERROR_SUCCESS;
+	}
+	return GetLastError();
 }
 
 /***********************************************************************/
 
 BOOL WINAPI Win32RemoveDirectoryAW(LPCVOID path)
 {
-    if (SHELL_OsIsUnicode())
-        return (SHNotifyRemoveDirectoryW(path) == ERROR_SUCCESS);
-    return (SHNotifyRemoveDirectoryA(path) == ERROR_SUCCESS);
+	if (SHELL_OsIsUnicode())
+	  return (SHNotifyRemoveDirectoryW(path) == ERROR_SUCCESS);
+	return (SHNotifyRemoveDirectoryA(path) == ERROR_SUCCESS);
 }
 
-/***********************************************************************/
-
-static DWORD SHNotifyDeleteFileA(FILE_OPERATION *op, LPCSTR path)
+/************************************************************************
+ * Win32DeleteFile           [SHELL32.164]
+ *
+ * Deletes a file. Also triggers a change notify if one exists.
+ *
+ * PARAMS
+ *  path       [I]   path to file to delete
+ *
+ * RETURNS
+ *  TRUE if successful, FALSE otherwise
+ *
+ * NOTES
+ *  Verified on Win98 / IE 5 (SHELL32 4.72, March 1999 build) to be ANSI.
+ *  This is Unicode on NT/2000
+ */
+static DWORD SHNotifyDeleteFileA(LPCSTR path)
 {
-    LPWSTR wPath;
-    DWORD retCode;
+	LPWSTR wPath;
+	DWORD retCode;
 
-    TRACE("(%s)\n", debugstr_a(path));
+	TRACE("(%s)\n", debugstr_a(path));
 
-    retCode = SHELL32_AnsiToUnicodeBuf(path, &wPath, 0);
-    if (!retCode)
-    {
-        retCode = SHNotifyDeleteFileW(op, wPath);
-        free(wPath);
-    }
-    return retCode;
+	retCode = SHELL32_AnsiToUnicodeBuf(path, &wPath, 0);
+	if (!retCode)
+	{
+	  retCode = SHNotifyDeleteFileW(wPath);
+	  free(wPath);
+	}
+	return retCode;
 }
 
 /***********************************************************************/
 
-static DWORD SHNotifyDeleteFileW(FILE_OPERATION *op, LPCWSTR path)
+static DWORD SHNotifyDeleteFileW(LPCWSTR path)
 {
-    BOOL ret;
-    LARGE_INTEGER filesize;
-    filesize.QuadPart = 0;
+	BOOL ret;
 
-    TRACE("(%s)\n", debugstr_w(path));
+	TRACE("(%s)\n", debugstr_w(path));
 
-    /* Warning: can also be called with empty op */
-    if (op)
-    {
-        WIN32_FILE_ATTRIBUTE_DATA info;
-        progressbar_update_files(op, path, NULL);
-        if (GetFileAttributesExW(path, GetFileExInfoStandard, &info))
-        {
-            filesize.u.HighPart = info.nFileSizeHigh;
-            filesize.u.LowPart  = info.nFileSizeLow;
-        }
-    }
-
-    ret = DeleteFileW(path);
-    if (!ret)
-    {
-        /* File may be write protected or a system file */
-        DWORD dwAttr = GetFileAttributesW(path);
-        if (IsAttrib(dwAttr, FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_SYSTEM))
-            if (SetFileAttributesW(path, dwAttr & ~(FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_SYSTEM)))
-                ret = DeleteFileW(path);
-    }
-    if (ret)
-    {
-        if (op)
-        {
-            /* There is no progress while deleting a file,
-             * simply report full file size when we are done. */
-            progressbar_copy_routine(filesize, filesize, filesize, filesize, 0,
-                                     CALLBACK_STREAM_SWITCH, NULL, NULL, op);
-        }
-
-        SHChangeNotify(SHCNE_DELETE, SHCNF_PATHW, path, NULL);
-        return ERROR_SUCCESS;
-    }
-    return GetLastError();
+	ret = DeleteFileW(path);
+	if (!ret)
+	{
+	  /* File may be write protected or a system file */
+	  DWORD dwAttr = GetFileAttributesW(path);
+	  if (IsAttrib(dwAttr, FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_SYSTEM))
+	    if (SetFileAttributesW(path, dwAttr & ~(FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_SYSTEM)))
+	      ret = DeleteFileW(path);
+	}
+	if (ret)
+	{
+	  SHChangeNotify(SHCNE_DELETE, SHCNF_PATHW, path, NULL);
+	  return ERROR_SUCCESS;
+	}
+	return GetLastError();
 }
 
 /***********************************************************************/
 
 DWORD WINAPI Win32DeleteFileAW(LPCVOID path)
 {
-    if (SHELL_OsIsUnicode())
-        return (SHNotifyDeleteFileW(NULL, path) == ERROR_SUCCESS);
-    return (SHNotifyDeleteFileA(NULL, path) == ERROR_SUCCESS);
+	if (SHELL_OsIsUnicode())
+	  return (SHNotifyDeleteFileW(path) == ERROR_SUCCESS);
+	return (SHNotifyDeleteFileA(path) == ERROR_SUCCESS);
 }
 
 /************************************************************************
@@ -613,48 +560,44 @@ DWORD WINAPI Win32DeleteFileAW(LPCVOID path)
  * Moves a file. Also triggers a change notify if one exists.
  *
  * PARAMS
- *  op         [I]   file operation context
  *  src        [I]   path to source file to move
  *  dest       [I]   path to target file to move to
  *
  * RETURNS
  *  ERROR_SUCCESS if successful
  */
-static DWORD SHNotifyMoveFileW(FILE_OPERATION *op, LPCWSTR src, LPCWSTR dest)
+static DWORD SHNotifyMoveFileW(LPCWSTR src, LPCWSTR dest)
 {
-    BOOL ret;
+	BOOL ret;
 
-    TRACE("(%s %s)\n", debugstr_w(src), debugstr_w(dest));
+	TRACE("(%s %s)\n", debugstr_w(src), debugstr_w(dest));
 
-    progressbar_update_files(op, src, dest);
+        ret = MoveFileExW(src, dest, MOVEFILE_REPLACE_EXISTING);
 
-    ret = MoveFileWithProgressW(src, dest, progressbar_copy_routine,
-                                op, MOVEFILE_REPLACE_EXISTING);
+        /* MOVEFILE_REPLACE_EXISTING fails with dirs, so try MoveFile */
+        if (!ret)
+            ret = MoveFileW(src, dest);
 
-    /* MOVEFILE_REPLACE_EXISTING fails with dirs, so try MoveFile */
-    if (!ret)
-        ret = MoveFileW(src, dest);
-
-    if (!ret)
-    {
-        DWORD dwAttr;
+	if (!ret)
+	{
+	  DWORD dwAttr;
 
-        dwAttr = SHFindAttrW(dest, FALSE);
-        if (INVALID_FILE_ATTRIBUTES == dwAttr)
-        {
-            /* Source file may be write protected or a system file */
-            dwAttr = GetFileAttributesW(src);
-            if (IsAttrib(dwAttr, FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_SYSTEM))
-                if (SetFileAttributesW(src, dwAttr & ~(FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_SYSTEM)))
-                    ret = MoveFileW(src, dest);
-        }
-    }
-    if (ret)
-    {
-        SHChangeNotify(SHCNE_RENAMEITEM, SHCNF_PATHW, src, dest);
-        return ERROR_SUCCESS;
-    }
-    return GetLastError();
+	  dwAttr = SHFindAttrW(dest, FALSE);
+	  if (INVALID_FILE_ATTRIBUTES == dwAttr)
+	  {
+	    /* Source file may be write protected or a system file */
+	    dwAttr = GetFileAttributesW(src);
+	    if (IsAttrib(dwAttr, FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_SYSTEM))
+	      if (SetFileAttributesW(src, dwAttr & ~(FILE_ATTRIBUTE_READONLY | FILE_ATTRIBUTE_SYSTEM)))
+	        ret = MoveFileW(src, dest);
+	  }
+	}
+	if (ret)
+	{
+	  SHChangeNotify(SHCNE_RENAMEITEM, SHCNF_PATHW, src, dest);
+	  return ERROR_SUCCESS;
+	}
+	return GetLastError();
 }
 
 /************************************************************************
@@ -663,7 +606,6 @@ static DWORD SHNotifyMoveFileW(FILE_OPERATION *op, LPCWSTR src, LPCWSTR dest)
  * Copies a file. Also triggers a change notify if one exists.
  *
  * PARAMS
- *  op            [I]   file operation context
  *  src           [I]   path to source file to move
  *  dest          [I]   path to target file to move to
  *  bFailIfExists [I]   if TRUE, the target file will not be overwritten if
@@ -672,29 +614,26 @@ static DWORD SHNotifyMoveFileW(FILE_OPERATION *op, LPCWSTR src, LPCWSTR dest)
  * RETURNS
  *  ERROR_SUCCESS if successful
  */
-static DWORD SHNotifyCopyFileW(FILE_OPERATION *op, LPCWSTR src, LPCWSTR dest, BOOL bFailIfExists)
+static DWORD SHNotifyCopyFileW(LPCWSTR src, LPCWSTR dest, BOOL bFailIfExists)
 {
-    BOOL ret;
-    DWORD attribs;
+	BOOL ret;
+	DWORD attribs;
 
-    TRACE("(%s %s %s)\n", debugstr_w(src), debugstr_w(dest), bFailIfExists ? "failIfExists" : "");
+	TRACE("(%s %s %s)\n", debugstr_w(src), debugstr_w(dest), bFailIfExists ? "failIfExists" : "");
 
-    progressbar_update_files(op, src, dest);
+        /* Destination file may already exist with read only attribute */
+        attribs = GetFileAttributesW(dest);
+        if (IsAttrib(attribs, FILE_ATTRIBUTE_READONLY))
+          SetFileAttributesW(dest, attribs & ~FILE_ATTRIBUTE_READONLY);
 
-    /* Destination file may already exist with read only attribute */
-    attribs = GetFileAttributesW(dest);
-    if (IsAttrib(attribs, FILE_ATTRIBUTE_READONLY))
-        SetFileAttributesW(dest, attribs & ~FILE_ATTRIBUTE_READONLY);
-
-    ret = CopyFileExW(src, dest, progressbar_copy_routine, op,
-                      &op->bCancelled, bFailIfExists);
-    if (ret)
-    {
-        SHChangeNotify(SHCNE_CREATE, SHCNF_PATHW, dest, NULL);
-        return ERROR_SUCCESS;
-    }
+	ret = CopyFileW(src, dest, bFailIfExists);
+	if (ret)
+	{
+	  SHChangeNotify(SHCNE_CREATE, SHCNF_PATHW, dest, NULL);
+	  return ERROR_SUCCESS;
+	}
 
-    return GetLastError();
+	return GetLastError();
 }
 
 /*************************************************************************
@@ -724,9 +663,9 @@ static DWORD SHNotifyCopyFileW(FILE_OPERATION *op, LPCWSTR src, LPCWSTR dest, BO
  */
 DWORD WINAPI SHCreateDirectory(HWND hWnd, LPCVOID path)
 {
-    if (SHELL_OsIsUnicode())
-        return SHCreateDirectoryExW(hWnd, path, NULL);
-    return SHCreateDirectoryExA(hWnd, path, NULL);
+	if (SHELL_OsIsUnicode())
+	  return SHCreateDirectoryExW(hWnd, path, NULL);
+	return SHCreateDirectoryExA(hWnd, path, NULL);
 }
 
 /*************************************************************************
@@ -763,18 +702,18 @@ DWORD WINAPI SHCreateDirectory(HWND hWnd, LPCVOID path)
  */
 int WINAPI SHCreateDirectoryExA(HWND hWnd, LPCSTR path, LPSECURITY_ATTRIBUTES sec)
 {
-    LPWSTR wPath;
-    DWORD retCode;
+	LPWSTR wPath;
+	DWORD retCode;
 
-    TRACE("(%s, %p)\n", debugstr_a(path), sec);
+	TRACE("(%s, %p)\n", debugstr_a(path), sec);
 
-    retCode = SHELL32_AnsiToUnicodeBuf(path, &wPath, 0);
-    if (!retCode)
-    {
-        retCode = SHCreateDirectoryExW(hWnd, wPath, sec);
-        free(wPath);
-    }
-    return retCode;
+	retCode = SHELL32_AnsiToUnicodeBuf(path, &wPath, 0);
+	if (!retCode)
+	{
+	  retCode = SHCreateDirectoryExW(hWnd, wPath, sec);
+	  free(wPath);
+	}
+	return retCode;
 }
 
 /*************************************************************************
@@ -848,25 +787,25 @@ int WINAPI SHCreateDirectoryExW(HWND hWnd, LPCWSTR path, LPSECURITY_ATTRIBUTES s
  */
 static DWORD SHFindAttrW(LPCWSTR pName, BOOL fileOnly)
 {
-    WIN32_FIND_DATAW wfd;
-    BOOL b_FileMask = fileOnly && (NULL != StrPBrkW(pName, L"*?"));
-    DWORD dwAttr = INVALID_FILE_ATTRIBUTES;
-    HANDLE hFind = FindFirstFileW(pName, &wfd);
+	WIN32_FIND_DATAW wfd;
+	BOOL b_FileMask = fileOnly && (NULL != StrPBrkW(pName, L"*?"));
+	DWORD dwAttr = INVALID_FILE_ATTRIBUTES;
+	HANDLE hFind = FindFirstFileW(pName, &wfd);
 
-    TRACE("%s %d\n", debugstr_w(pName), fileOnly);
-    if (INVALID_HANDLE_VALUE != hFind)
-    {
-        do
-        {
-            if (b_FileMask && IsAttribDir(wfd.dwFileAttributes))
-                continue;
-            dwAttr = wfd.dwFileAttributes;
-            break;
-        }
-        while (FindNextFileW(hFind, &wfd));
-        FindClose(hFind);
-    }
-    return dwAttr;
+	TRACE("%s %d\n", debugstr_w(pName), fileOnly);
+	if (INVALID_HANDLE_VALUE != hFind)
+	{
+	  do
+	  {
+	    if (b_FileMask && IsAttribDir(wfd.dwFileAttributes))
+	       continue;
+	    dwAttr = wfd.dwFileAttributes;
+	    break;
+	  }
+	  while (FindNextFileW(hFind, &wfd));
+	  FindClose(hFind);
+	}
+	return dwAttr;
 }
 
 /*************************************************************************
@@ -880,27 +819,27 @@ static DWORD SHFindAttrW(LPCWSTR pName, BOOL fileOnly)
  */
 static DWORD SHNameTranslate(LPWSTR* wString, LPCWSTR* pWToFrom, BOOL more)
 {
-    DWORD size = 0, aSize = 0;
-    LPCSTR aString = (LPCSTR)*pWToFrom;
+	DWORD size = 0, aSize = 0;
+	LPCSTR aString = (LPCSTR)*pWToFrom;
 
-    if (aString)
-    {
-        do
-        {
-            size = lstrlenA(aString) + 1;
-            aSize += size;
-            aString += size;
-        } while ((size != 1) && more);
-        /* The two sizes might be different in the case of multibyte chars */
-        size = MultiByteToWideChar(CP_ACP, 0, (LPCSTR)*pWToFrom, aSize, *wString, 0);
-        if (*wString) /* only in the second loop */
-        {
-            MultiByteToWideChar(CP_ACP, 0, (LPCSTR)*pWToFrom, aSize, *wString, size);
-            *pWToFrom = *wString;
-            *wString += size;
-        }
-    }
-    return size;
+	if (aString)
+	{
+	  do
+	  {
+	    size = lstrlenA(aString) + 1;
+	    aSize += size;
+	    aString += size;
+	  } while ((size != 1) && more);
+	  /* The two sizes might be different in the case of multibyte chars */
+	  size = MultiByteToWideChar(CP_ACP, 0, (LPCSTR)*pWToFrom, aSize, *wString, 0);
+	  if (*wString) /* only in the second loop */
+	  {
+	    MultiByteToWideChar(CP_ACP, 0, (LPCSTR)*pWToFrom, aSize, *wString, size);
+	    *pWToFrom = *wString;
+	    *wString += size;
+	  }
+	}
+	return size;
 }
 /*************************************************************************
  * SHFileOperationA          [SHELL32.@]
@@ -920,47 +859,72 @@ static DWORD SHNameTranslate(LPWSTR* wString, LPCWSTR* pWToFrom, BOOL more)
  */
 int WINAPI SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp)
 {
-    SHFILEOPSTRUCTW nFileOp = *((LPSHFILEOPSTRUCTW)lpFileOp);
-    int retCode = 0;
-    DWORD size;
-    LPWSTR ForFree = NULL, /* we change wString in SHNameTranslate and can't use it for freeing */
-           wString = NULL; /* we change this in SHNameTranslate */
-
-    TRACE("\n");
-    if (FO_DELETE == (nFileOp.wFunc & FO_MASK))
-        nFileOp.pTo = NULL; /* we need a NULL or a valid pointer for translation */
-    if (!(nFileOp.fFlags & FOF_SIMPLEPROGRESS))
-        nFileOp.lpszProgressTitle = NULL; /* we need a NULL or a valid pointer for translation */
-    while (1) /* every loop calculate size, second translate also, if we have storage for this */
-    {
-        size = SHNameTranslate(&wString, &nFileOp.lpszProgressTitle, FALSE); /* no loop */
-        size += SHNameTranslate(&wString, &nFileOp.pFrom, TRUE); /* internal loop */
-        size += SHNameTranslate(&wString, &nFileOp.pTo, TRUE); /* internal loop */
+	SHFILEOPSTRUCTW nFileOp = *((LPSHFILEOPSTRUCTW)lpFileOp);
+	int retCode = 0;
+	DWORD size;
+	LPWSTR ForFree = NULL, /* we change wString in SHNameTranslate and can't use it for freeing */
+	       wString = NULL; /* we change this in SHNameTranslate */
+
+	TRACE("\n");
+	if (FO_DELETE == (nFileOp.wFunc & FO_MASK))
+	  nFileOp.pTo = NULL; /* we need a NULL or a valid pointer for translation */
+	if (!(nFileOp.fFlags & FOF_SIMPLEPROGRESS))
+	  nFileOp.lpszProgressTitle = NULL; /* we need a NULL or a valid pointer for translation */
+	while (1) /* every loop calculate size, second translate also, if we have storage for this */
+	{
+	  size = SHNameTranslate(&wString, &nFileOp.lpszProgressTitle, FALSE); /* no loop */
+	  size += SHNameTranslate(&wString, &nFileOp.pFrom, TRUE); /* internal loop */
+	  size += SHNameTranslate(&wString, &nFileOp.pTo, TRUE); /* internal loop */
 
-        if (ForFree)
-        {
-            retCode = SHFileOperationW(&nFileOp);
-            /* Windows 95/98 returns S_OK for this case. */
-            if (retCode == ERROR_ACCESS_DENIED && (GetVersion() & 0x80000000))
-                retCode = S_OK;
-            free(ForFree); /* we cannot use wString, it was changed */
-            break;
-        }
-        else
-        {
-            wString = ForFree = malloc(size * sizeof(WCHAR));
-            if (ForFree) continue;
-            retCode = ERROR_OUTOFMEMORY;
-            nFileOp.fAnyOperationsAborted = TRUE;
-            return retCode;
-        }
-    }
+	  if (ForFree)
+	  {
+	    retCode = SHFileOperationW(&nFileOp);
+	    /* Windows 95/98 returns S_OK for this case. */
+	    if (retCode == ERROR_ACCESS_DENIED && (GetVersion() & 0x80000000))
+	      retCode = S_OK;
+
+	    free(ForFree); /* we cannot use wString, it was changed */
+	    break;
+	  }
+	  else
+	  {
+	    wString = ForFree = malloc(size * sizeof(WCHAR));
+	    if (ForFree) continue;
+	    retCode = ERROR_OUTOFMEMORY;
+	    nFileOp.fAnyOperationsAborted = TRUE;
+	    return retCode;
+	  }
+	}
 
-    lpFileOp->hNameMappings = nFileOp.hNameMappings;
-    lpFileOp->fAnyOperationsAborted = nFileOp.fAnyOperationsAborted;
-    return retCode;
+	lpFileOp->hNameMappings = nFileOp.hNameMappings;
+	lpFileOp->fAnyOperationsAborted = nFileOp.fAnyOperationsAborted;
+	return retCode;
 }
 
+#define ERROR_SHELL_INTERNAL_FILE_NOT_FOUND 1026
+
+typedef struct
+{
+    DWORD attributes;
+    LPWSTR szDirectory;
+    LPWSTR szFilename;
+    LPWSTR szFullPath;
+    BOOL bFromWildcard;
+    BOOL bFromRelative;
+    BOOL bExists;
+} FILE_ENTRY;
+
+typedef struct
+{
+    FILE_ENTRY *feFiles;
+    DWORD num_alloc;
+    DWORD dwNumFiles;
+    BOOL bAnyFromWildcard;
+    BOOL bAnyDirectories;
+    BOOL bAnyDontExist;
+} FILE_LIST;
+
+
 static inline void grow_list(FILE_LIST *list)
 {
     FILE_ENTRY *new = _recalloc(list->feFiles, list->num_alloc * 2, sizeof(*new));
@@ -1125,7 +1089,7 @@ static void destroy_file_list(FILE_LIST *flList)
 static void copy_dir_to_dir(FILE_OPERATION *op, const FILE_ENTRY *feFrom, LPCWSTR szDestPath)
 {
     WCHAR szFrom[MAX_PATH], szTo[MAX_PATH];
-    FILE_LIST flFromNew, flToNew;
+    SHFILEOPSTRUCTW fileOp;
 
     if (IsDotDir(feFrom->szFilename))
         return;
@@ -1151,16 +1115,17 @@ static void copy_dir_to_dir(FILE_OPERATION *op, const FILE_ENTRY *feFrom, LPCWST
     PathCombineW(szFrom, feFrom->szFullPath, L"*.*");
     szFrom[lstrlenW(szFrom) + 1] = '\0';
 
-    ZeroMemory(&flFromNew, sizeof(FILE_LIST));
-    ZeroMemory(&flToNew, sizeof(FILE_LIST));
-    parse_file_list(&flFromNew, szFrom);
-    parse_file_list(&flToNew, szTo);
+    fileOp = *op->req;
+    fileOp.pFrom = szFrom;
+    fileOp.pTo = szTo;
+    fileOp.fFlags &= ~FOF_MULTIDESTFILES; /* we know we're copying to one dir */
 
-    /* we know we're copying to one dir */
-    copy_files(op, FALSE, &flFromNew, &flToNew);
+    /* Don't ask the user about overwriting files when he accepted to overwrite the
+       folder. FIXME: this is not exactly what Windows does - e.g. there would be
+       an additional confirmation for a nested folder */
+    fileOp.fFlags |= FOF_NOCONFIRMATION;  
 
-    destroy_file_list(&flFromNew);
-    destroy_file_list(&flToNew);
+    SHFileOperationW(&fileOp);
 }
 
 static BOOL copy_file_to_file(FILE_OPERATION *op, const WCHAR *szFrom, const WCHAR *szTo)
@@ -1171,7 +1136,7 @@ static BOOL copy_file_to_file(FILE_OPERATION *op, const WCHAR *szFrom, const WCH
             return FALSE;
     }
 
-    return SHNotifyCopyFileW(op, szFrom, szTo, FALSE) == 0;
+    return SHNotifyCopyFileW(szFrom, szTo, FALSE) == 0;
 }
 
 /* copy a file or directory to another directory */
@@ -1211,7 +1176,7 @@ static void create_dest_dirs(LPCWSTR szDestDir)
 }
 
 /* the FO_COPY operation */
-static int copy_files(FILE_OPERATION *op, BOOL multidest, const FILE_LIST *flFrom, FILE_LIST *flTo)
+static int copy_files(FILE_OPERATION *op, const FILE_LIST *flFrom, FILE_LIST *flTo)
 {
     DWORD i;
     const FILE_ENTRY *entryToCopy;
@@ -1234,7 +1199,7 @@ static int copy_files(FILE_OPERATION *op, BOOL multidest, const FILE_LIST *flFro
         fileDest = &flTo->feFiles[0];
     }
 
-    if (multidest && flTo->dwNumFiles > 1)
+    if (op->req->fFlags & FOF_MULTIDESTFILES && flTo->dwNumFiles > 1)
     {
         if (flFrom->bAnyFromWildcard)
             return ERROR_CANCELLED;
@@ -1286,7 +1251,8 @@ static int copy_files(FILE_OPERATION *op, BOOL multidest, const FILE_LIST *flFro
     {
         entryToCopy = &flFrom->feFiles[i];
 
-        if (multidest && flTo->dwNumFiles > 1)
+        if ((op->req->fFlags & FOF_MULTIDESTFILES) &&
+            flTo->dwNumFiles > 1)
         {
             fileDest = &flTo->feFiles[i];
         }
@@ -1326,8 +1292,6 @@ static int copy_files(FILE_OPERATION *op, BOOL multidest, const FILE_LIST *flFro
         }
 
         /* Vista return code. XP would return e.g. ERROR_FILE_NOT_FOUND, ERROR_ALREADY_EXISTS */
-        if (op->progress != NULL)
-            op->bCancelled |= IProgressDialog_HasUserCancelled(op->progress);
         if (op->bCancelled)
             return ERROR_CANCELLED;
     }
@@ -1359,7 +1323,7 @@ static BOOL confirm_delete_list(HWND hWnd, DWORD fFlags, BOOL fTrash, const FILE
 }
 
 /* the FO_DELETE operation */
-static int delete_files(FILE_OPERATION *op, const FILE_LIST *flFrom)
+static int delete_files(LPSHFILEOPSTRUCTW lpFileOp, const FILE_LIST *flFrom)
 {
     const FILE_ENTRY *fileEntry;
     DWORD i;
@@ -1370,12 +1334,12 @@ static int delete_files(FILE_OPERATION *op, const FILE_LIST *flFrom)
         return ERROR_SUCCESS;
 
     /* Windows also checks only the first item */
-    bTrash = (op->req->fFlags & FOF_ALLOWUNDO) && is_trash_available();
+    bTrash = (lpFileOp->fFlags & FOF_ALLOWUNDO) && is_trash_available();
 
-    if (!(op->req->fFlags & FOF_NOCONFIRMATION) || (!bTrash && op->req->fFlags & FOF_WANTNUKEWARNING))
-        if (!confirm_delete_list(op->req->hwnd, op->req->fFlags, bTrash, flFrom))
+    if (!(lpFileOp->fFlags & FOF_NOCONFIRMATION) || (!bTrash && lpFileOp->fFlags & FOF_WANTNUKEWARNING))
+        if (!confirm_delete_list(lpFileOp->hwnd, lpFileOp->fFlags, bTrash, flFrom))
         {
-            op->req->fAnyOperationsAborted = TRUE;
+            lpFileOp->fAnyOperationsAborted = TRUE;
             return 0;
         }
 
@@ -1384,7 +1348,7 @@ static int delete_files(FILE_OPERATION *op, const FILE_LIST *flFrom)
         fileEntry = &flFrom->feFiles[i];
 
         if (!IsAttribFile(fileEntry->attributes) &&
-            (op->req->fFlags & FOF_FILESONLY && fileEntry->bFromWildcard))
+            (lpFileOp->fFlags & FOF_FILESONLY && fileEntry->bFromWildcard))
             continue;
 
         if (bTrash)
@@ -1394,43 +1358,39 @@ static int delete_files(FILE_OPERATION *op, const FILE_LIST *flFrom)
                 continue;
 
             /* Note: Windows silently deletes the file in such a situation, we show a dialog */
-            if (!(op->req->fFlags & FOF_NOCONFIRMATION) || (op->req->fFlags & FOF_WANTNUKEWARNING))
-                bDelete = SHELL_ConfirmDialogW(op->req->hwnd, ASK_CANT_TRASH_ITEM, fileEntry->szFullPath, NULL);
+            if (!(lpFileOp->fFlags & FOF_NOCONFIRMATION) || (lpFileOp->fFlags & FOF_WANTNUKEWARNING))
+                bDelete = SHELL_ConfirmDialogW(lpFileOp->hwnd, ASK_CANT_TRASH_ITEM, fileEntry->szFullPath, NULL);
             else
                 bDelete = TRUE;
 
             if (!bDelete)
             {
-                op->req->fAnyOperationsAborted = TRUE;
+                lpFileOp->fAnyOperationsAborted = TRUE;
                 break;
             }
         }
-
+        
         /* delete the file or directory */
         if (IsAttribFile(fileEntry->attributes))
-            ret = SHNotifyDeleteFileW(op, fileEntry->szFullPath);
+            ret = DeleteFileW(fileEntry->szFullPath) ?
+                    ERROR_SUCCESS : GetLastError();
         else
-            ret = SHELL_DeleteDirectoryW(op, fileEntry->szFullPath, FALSE);
+            ret = SHELL_DeleteDirectoryW(lpFileOp->hwnd, fileEntry->szFullPath, FALSE);
 
         if (ret)
             return ret;
-
-        if (op->progress != NULL)
-            op->bCancelled |= IProgressDialog_HasUserCancelled(op->progress);
-        if (op->bCancelled)
-            return ERROR_CANCELLED;
     }
 
     return ERROR_SUCCESS;
 }
 
 /* move a directory to another directory */
-static void move_dir_to_dir(FILE_OPERATION *op, BOOL multidest, const FILE_ENTRY *feFrom, const FILE_ENTRY *feTo)
+static void move_dir_to_dir(LPSHFILEOPSTRUCTW lpFileOp, const FILE_ENTRY *feFrom, const FILE_ENTRY *feTo)
 {
     WCHAR from[MAX_PATH], to[MAX_PATH];
 
     /* Windows doesn't combine path when FOF_MULTIDESTFILES is set */
-    if (op->req->fFlags & FOF_MULTIDESTFILES)
+    if (lpFileOp->fFlags & FOF_MULTIDESTFILES)
         lstrcpyW(to, feTo->szFullPath);
     else
         PathCombineW(to, feTo->szFullPath, feFrom->szFilename);
@@ -1441,14 +1401,15 @@ static void move_dir_to_dir(FILE_OPERATION *op, BOOL multidest, const FILE_ENTRY
        with wildcard and restart SHFileOperationW */
     if (PathFileExistsW(to))
     {
-        SHFILEOPSTRUCTW fileOp = {0};
+        SHFILEOPSTRUCTW fileOp;
 
         PathCombineW(from, feFrom->szFullPath, L"*.*");
         from[lstrlenW(from) + 1] = '\0';
 
+        fileOp = *lpFileOp;
         fileOp.pFrom = from;
         fileOp.pTo = to;
-        fileOp.fFlags = op->req->fFlags & ~FOF_MULTIDESTFILES; /* we know we're moving to one dir */
+        fileOp.fFlags &= ~FOF_MULTIDESTFILES; /* we know we're moving to one dir */
 
         /* Don't ask the user about overwriting files when he accepted to overwrite the
            folder. FIXME: this is not exactly what Windows does - e.g. there would be
@@ -1461,22 +1422,22 @@ static void move_dir_to_dir(FILE_OPERATION *op, BOOL multidest, const FILE_ENTRY
     }
     else
     {
-        SHNotifyMoveFileW(op, feFrom->szFullPath, to);
+        SHNotifyMoveFileW(feFrom->szFullPath, to);
     }
 }
 
 /* move a file to another directory */
-static void move_file_to_dir(FILE_OPERATION *op, const FILE_ENTRY *feFrom, const FILE_ENTRY *feTo)
+static void move_file_to_dir(LPSHFILEOPSTRUCTW lpFileOp, const FILE_ENTRY *feFrom, const FILE_ENTRY *feTo)
 {
     WCHAR to[MAX_PATH];
 
     PathCombineW(to, feTo->szFullPath, feFrom->szFilename);
     to[lstrlenW(to) + 1] = '\0';
-    SHNotifyMoveFileW(op, feFrom->szFullPath, to);
+    SHNotifyMoveFileW(feFrom->szFullPath, to);
 }
 
 /* the FO_MOVE operation */
-static int move_files(FILE_OPERATION *op, BOOL multidest, const FILE_LIST *flFrom, const FILE_LIST *flTo)
+static int move_files(LPSHFILEOPSTRUCTW lpFileOp, const FILE_LIST *flFrom, const FILE_LIST *flTo)
 {
     DWORD i;
     INT mismatched = 0;
@@ -1490,12 +1451,14 @@ static int move_files(FILE_OPERATION *op, BOOL multidest, const FILE_LIST *flFro
     if (!flTo->dwNumFiles)
         return ERROR_FILE_NOT_FOUND;
 
-    if (!multidest && flTo->dwNumFiles > 1 && flFrom->dwNumFiles > 1)
+    if (!(lpFileOp->fFlags & FOF_MULTIDESTFILES) &&
+        flTo->dwNumFiles > 1 && flFrom->dwNumFiles > 1)
     {
         return ERROR_CANCELLED;
     }
 
-    if (!multidest && !flFrom->bAnyDirectories &&
+    if (!(lpFileOp->fFlags & FOF_MULTIDESTFILES) &&
+        !flFrom->bAnyDirectories &&
         flFrom->dwNumFiles > flTo->dwNumFiles)
     {
         return ERROR_CANCELLED;
@@ -1505,7 +1468,7 @@ static int move_files(FILE_OPERATION *op, BOOL multidest, const FILE_LIST *flFro
     if (ret && ret != ERROR_ALREADY_EXISTS)
         return ret;
 
-    if (multidest)
+    if (lpFileOp->fFlags & FOF_MULTIDESTFILES)
         mismatched = flFrom->dwNumFiles - flTo->dwNumFiles;
 
     fileDest = &flTo->feFiles[0];
@@ -1516,7 +1479,7 @@ static int move_files(FILE_OPERATION *op, BOOL multidest, const FILE_LIST *flFro
         if (!PathFileExistsW(fileDest->szDirectory))
             return ERROR_CANCELLED;
 
-        if (multidest)
+        if (lpFileOp->fFlags & FOF_MULTIDESTFILES)
         {
             if (i >= flTo->dwNumFiles)
                 break;
@@ -1532,17 +1495,12 @@ static int move_files(FILE_OPERATION *op, BOOL multidest, const FILE_LIST *flFro
         if (fileDest->bExists && IsAttribDir(fileDest->attributes))
         {
             if (IsAttribDir(entryToMove->attributes))
-                move_dir_to_dir(op, multidest, entryToMove, fileDest);
+                move_dir_to_dir(lpFileOp, entryToMove, fileDest);
             else
-                move_file_to_dir(op, entryToMove, fileDest);
+                move_file_to_dir(lpFileOp, entryToMove, fileDest);
         }
         else
-            SHNotifyMoveFileW(op, entryToMove->szFullPath, fileDest->szFullPath);
-
-        if (op->progress != NULL)
-            op->bCancelled |= IProgressDialog_HasUserCancelled(op->progress);
-        if (op->bCancelled)
-            return ERROR_CANCELLED;
+            SHNotifyMoveFileW(entryToMove->szFullPath, fileDest->szFullPath);
     }
 
     if (mismatched > 0)
@@ -1557,7 +1515,7 @@ static int move_files(FILE_OPERATION *op, BOOL multidest, const FILE_LIST *flFro
 }
 
 /* the FO_RENAME files */
-static int rename_files(FILE_OPERATION *op, const FILE_LIST *flFrom, const FILE_LIST *flTo)
+static int rename_files(LPSHFILEOPSTRUCTW lpFileOp, const FILE_LIST *flFrom, const FILE_LIST *flTo)
 {
     const FILE_ENTRY *feFrom;
     const FILE_ENTRY *feTo;
@@ -1579,15 +1537,15 @@ static int rename_files(FILE_OPERATION *op, const FILE_LIST *flFrom, const FILE_
     if (feTo->bExists)
         return ERROR_ALREADY_EXISTS;
 
-    return SHNotifyMoveFileW(op, feFrom->szFullPath, feTo->szFullPath);
+    return SHNotifyMoveFileW(feFrom->szFullPath, feTo->szFullPath);
 }
 
 /* alert the user if an unsupported flag is used */
 static void check_flags(FILEOP_FLAGS fFlags)
 {
     WORD wUnsupportedFlags = FOF_NO_CONNECTED_ELEMENTS |
-                             FOF_NOCOPYSECURITYATTRIBS | FOF_NORECURSEREPARSE |
-                             FOF_RENAMEONCOLLISION | FOF_WANTMAPPINGHANDLE;
+        FOF_NOCOPYSECURITYATTRIBS | FOF_NORECURSEREPARSE |
+        FOF_RENAMEONCOLLISION | FOF_WANTMAPPINGHANDLE;
 
     if (fFlags & wUnsupportedFlags)
         FIXME("Unsupported flags: %04x\n", fFlags);
@@ -1602,7 +1560,6 @@ int WINAPI SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp)
 {
     FILE_OPERATION op;
     FILE_LIST flFrom, flTo;
-    HRESULT co_ret = E_FAIL;
     int ret = 0;
 
     if (!lpFileOp)
@@ -1621,56 +1578,28 @@ int WINAPI SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp)
 
     ZeroMemory(&op, sizeof(op));
     op.req = lpFileOp;
-    op.totalSize.QuadPart = 0;
-    op.completedSize.QuadPart = 0;
     op.bManyItems = (flFrom.dwNumFiles > 1);
     lpFileOp->fAnyOperationsAborted = FALSE;
 
-    if (lpFileOp->wFunc != FO_RENAME && !(lpFileOp->fFlags & FOF_SILENT))
-    {
-        co_ret = CoInitialize(NULL);
-        ret = CoCreateInstance(&CLSID_ProgressDialog, NULL, CLSCTX_INPROC_SERVER,
-                               &IID_IProgressDialog, (void**)&op.progress);
-        if (SUCCEEDED(ret))
-        {
-            IProgressDialog_StartProgressDialog(op.progress, op.req->hwnd, NULL,
-                                                PROGDLG_NORMAL | PROGDLG_AUTOTIME, NULL);
-
-            progressbar_update_title(&op);
-            progressbar_calc_totalsize(&op, &flFrom);
-        }
-        else
-        {
-            FIXME("Failed to create progress dialog\n");
-            op.progress = NULL;
-        }
-    }
-
     switch (lpFileOp->wFunc)
     {
         case FO_COPY:
-            ret = copy_files(&op, op.req->fFlags & FOF_MULTIDESTFILES, &flFrom, &flTo);
+            ret = copy_files(&op, &flFrom, &flTo);
             break;
         case FO_DELETE:
-            ret = delete_files(&op, &flFrom);
+            ret = delete_files(lpFileOp, &flFrom);
             break;
         case FO_MOVE:
-            ret = move_files(&op, op.req->fFlags & FOF_MULTIDESTFILES, &flFrom, &flTo);
+            ret = move_files(lpFileOp, &flFrom, &flTo);
             break;
         case FO_RENAME:
-            ret = rename_files(&op, &flFrom, &flTo);
+            ret = rename_files(lpFileOp, &flFrom, &flTo);
             break;
         default:
             ret = ERROR_INVALID_PARAMETER;
             break;
     }
 
-    if (op.progress)
-    {
-        IProgressDialog_StopProgressDialog(op.progress);
-        IProgressDialog_Release(op.progress);
-    }
-
     destroy_file_list(&flFrom);
 
     if (lpFileOp->wFunc != FO_DELETE)
@@ -1679,9 +1608,6 @@ int WINAPI SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp)
     if (ret == ERROR_CANCELLED)
         lpFileOp->fAnyOperationsAborted = TRUE;
 
-    if (SUCCEEDED(co_ret))
-        CoUninitialize();
-
     SetLastError(ERROR_SUCCESS);
     return ret;
 }
@@ -1702,19 +1628,19 @@ int WINAPI SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp)
  */
 void WINAPI SHFreeNameMappings(HANDLE hNameMapping)
 {
-    if (hNameMapping)
-    {
-        int i = SHDSA_GetItemCount((HDSA)hNameMapping) - 1;
+	if (hNameMapping)
+	{
+	  int i = SHDSA_GetItemCount((HDSA)hNameMapping) - 1;
 
-        for (; i>= 0; i--)
-        {
+	  for (; i>= 0; i--)
+	  {
             LPSHNAMEMAPPINGW lp = DSA_GetItemPtr(hNameMapping, i);
 
-            SHFree(lp->pszOldPath);
-            SHFree(lp->pszNewPath);
-        }
-        DSA_Destroy(hNameMapping);
-    }
+	    SHFree(lp->pszOldPath);
+	    SHFree(lp->pszNewPath);
+	  }
+          DSA_Destroy(hNameMapping);
+	}
 }
 
 /*************************************************************************
@@ -1820,14 +1746,14 @@ DWORD WINAPI SheChangeDirW(LPWSTR path)
 }
 
 /*************************************************************************
- * IsNetDrive                   [SHELL32.66]
+ * IsNetDrive			[SHELL32.66]
  */
 int WINAPI IsNetDrive(int drive)
 {
-    char root[4];
-    strcpy(root, "A:\\");
-    root[0] += (char)drive;
-    return (GetDriveTypeA(root) == DRIVE_REMOTE);
+	char root[4];
+	strcpy(root, "A:\\");
+	root[0] += (char)drive;
+	return (GetDriveTypeA(root) == DRIVE_REMOTE);
 }
 
 
@@ -2579,189 +2505,3 @@ HRESULT WINAPI IFileOperation_Constructor(IUnknown *outer, REFIID riid, void **o
 
     return hr;
 }
-
-static BOOL progressbar_calc_size(FILE_OPERATION *op, LPWSTR buf, BOOL is_folder, DWORD *ticks)
-{
-    WIN32_FIND_DATAW wfd;
-    HANDLE find;
-    UINT i = wcslen(buf);
-    WCHAR *file = buf + i;
-    size_t size = MAX_PATH - i;
-
-    if (size < 3)
-        return FALSE;
-
-    if (is_folder)
-    {
-        *file++ = '\\';
-        size--;
-
-        file[0] = '*';
-        file[1] = 0;
-    }
-    else
-    {
-        file[0] = 0;
-    }
-
-    find = FindFirstFileW(buf, &wfd);
-    if (find == INVALID_HANDLE_VALUE)
-    {
-        WARN("FindFirstFileW %s failed\n", debugstr_w(buf));
-        return FALSE;
-    }
-
-    do
-    {
-        if (wfd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
-        {
-            if (wfd.cFileName[0] == '.')
-            {
-                if (wfd.cFileName[1] == 0) continue;
-                if (wfd.cFileName[1] == '.' && wfd.cFileName[2] == 0) continue;
-            }
-
-            if (!lstrcpynW(file, wfd.cFileName, size)) continue;
-            progressbar_calc_size(op, buf, TRUE, ticks);
-        }
-        else
-        {
-            LARGE_INTEGER filesize;
-            filesize.u.LowPart  = wfd.nFileSizeLow;
-            filesize.u.HighPart = wfd.nFileSizeHigh;
-            op->totalSize.QuadPart += filesize.QuadPart;
-        }
-
-        if (GetTickCount() - *ticks > 500)
-        {
-            if (op->progress != NULL)
-                op->bCancelled |= IProgressDialog_HasUserCancelled(op->progress);
-            if (op->bCancelled)
-                break;
-            *ticks = GetTickCount();
-        }
-
-    }
-    while (FindNextFileW(find, &wfd));
-
-    FindClose(find);
-    return TRUE;
-}
-
-static void progressbar_calc_totalsize(FILE_OPERATION *op, const FILE_LIST *from)
-{
-    WCHAR filename[MAX_PATH];
-    DWORD ticks = GetTickCount();
-    UINT i;
-
-    op->totalSize.QuadPart = 0;
-
-    for (i = 0; i < from->dwNumFiles && !op->bCancelled; i++)
-    {
-        if (!lstrcpynW(filename, from->feFiles[i].szFullPath, sizeof(filename)/sizeof(filename[0])))
-            continue;
-        progressbar_calc_size(op, filename, IsAttribDir(from->feFiles[i].attributes), &ticks);
-    }
-}
-
-static void progressbar_update_title(FILE_OPERATION *op)
-{
-    WCHAR buf[64];
-    UINT title_id, builder_id, animation_id;
-
-    if (op->progress == NULL)
-        return;
-
-    switch (op->req->wFunc)
-    {
-        case FO_COPY:
-            title_id      = IDS_FILEOP_COPYING;
-            builder_id    = IDS_FILEOP_FROM_TO;
-            animation_id  = IDR_AVI_FILECOPY;
-            break;
-
-        case FO_DELETE:
-            title_id      = IDS_FILEOP_DELETING;
-            builder_id    = IDS_FILEOP_FROM;
-            animation_id  = IDR_AVI_FILEDELETE;
-            break;
-
-        case FO_MOVE:
-            title_id      = IDS_FILEOP_MOVING;
-            builder_id    = IDS_FILEOP_FROM_TO;
-            animation_id  = IDR_AVI_FILEMOVE;
-            break;
-
-        default:
-            return;
-    }
-
-    LoadStringW(shell32_hInstance, title_id, buf, sizeof(buf)/sizeof(WCHAR));
-    IProgressDialog_SetTitle(op->progress, buf);
-
-    LoadStringW(shell32_hInstance, builder_id,  op->szBuilderString,
-                sizeof(op->szBuilderString)/sizeof(WCHAR));
-
-    LoadStringW(shell32_hInstance, IDS_FILEOP_PREFLIGHT, buf, sizeof(buf)/sizeof(WCHAR));
-    IProgressDialog_SetLine(op->progress, 1, buf, FALSE, NULL);
-
-    IProgressDialog_SetAnimation(op->progress, shell32_hInstance, animation_id);
-}
-
-static void progressbar_update_files(FILE_OPERATION *op, LPCWSTR src, LPCWSTR dst)
-{
-    LPWSTR src_file, dst_file;
-    WCHAR src_dir[64], dst_dir[64], final[260];
-    DWORD_PTR args[2] = {0, 0};
-
-    if (!op->progress || !src || (op->req->wFunc == FO_MOVE && !dst))
-        return;
-
-    if (op->req->wFunc != FO_COPY &&
-        op->req->wFunc != FO_MOVE &&
-        op->req->wFunc != FO_DELETE)
-    {
-        return;
-    }
-
-    src_file = PathFindFileNameW(src);
-    lstrcpynW(src_dir, src, min(sizeof(src_dir) / sizeof(WCHAR) - 1, src_file - src));
-    args[0] = (DWORD_PTR)&src_dir;
-
-    if (op->req->wFunc == FO_MOVE ||
-        op->req->wFunc == FO_COPY)
-    {
-        if (PathIsDirectoryW(dst))
-            args[1] = (DWORD_PTR)&dst;
-        else
-        {
-            dst_file = PathFindFileNameW(dst);
-            lstrcpynW(dst_dir, dst, min(sizeof(dst_dir) / sizeof(WCHAR) - 1, dst_file - dst));
-            args[1] = (DWORD_PTR)&dst_dir;
-        }
-    }
-
-    FormatMessageW(FORMAT_MESSAGE_FROM_STRING | FORMAT_MESSAGE_ARGUMENT_ARRAY, op->szBuilderString,
-                   0, 0, final, sizeof(final)/sizeof(final[0]), (va_list *)&args);
-
-    IProgressDialog_SetLine(op->progress, 1, src_file, FALSE, NULL);
-    IProgressDialog_SetLine(op->progress, 2, final, FALSE, NULL);
-}
-
-static DWORD CALLBACK progressbar_copy_routine(LARGE_INTEGER total_size, LARGE_INTEGER total_transferred, LARGE_INTEGER stream_size,
-        LARGE_INTEGER stream_transferred, DWORD stream_number, DWORD reason, HANDLE src_file, HANDLE dst_file, LPVOID user)
-{
-    FILE_OPERATION *op = (FILE_OPERATION *)user;
-
-    if (!op->progress)
-        return PROGRESS_CONTINUE;
-
-    if (reason == CALLBACK_STREAM_SWITCH)
-        op->completedSize.QuadPart += total_size.QuadPart;
-
-    IProgressDialog_SetProgress64(op->progress, op->completedSize.QuadPart - total_size.QuadPart +
-                                  total_transferred.QuadPart, op->totalSize.QuadPart);
-
-    op->bCancelled |= IProgressDialog_HasUserCancelled(op->progress);
-    return op->bCancelled ? PROGRESS_CANCEL : PROGRESS_CONTINUE;
-}
diff --git a/dlls/shell32/shlview_cmenu.c b/dlls/shell32/shlview_cmenu.c
index d06c8b5ba92..cac33c39af7 100644
--- a/dlls/shell32/shlview_cmenu.c
+++ b/dlls/shell32/shlview_cmenu.c
@@ -36,134 +36,15 @@
 
 #include "shresdef.h"
 #include "shlwapi.h"
-#include "aclui.h"
-#include "aclapi.h"
 
 #include "wine/debug.h"
 
-/* Small hack: We need to remove DECLSPEC_HIDDEN from the aclui export. */
-const GUID IID_ISecurityInformation = {0x965fc360, 0x16ff, 0x11d0, {0x91, 0xcb, 0x0, 0xaa, 0x0, 0xbb, 0xb7, 0x23}};
-
 WINE_DEFAULT_DEBUG_CHANNEL(shell);
 
 #define FCIDM_BASE 0x7000
 
 #define VERB_ID_OFFSET 0x200
 
-/* According to https://blogs.msdn.microsoft.com/oldnewthing/20070726-00/?p=25833 */
-static const SI_ACCESS access_rights_files[] =
-{
-    /* General access rights */
-    {
-        &GUID_NULL,
-        FILE_ALL_ACCESS, MAKEINTRESOURCEW(IDS_SECURITY_ALL_ACCESS),
-        SI_ACCESS_GENERAL
-    },
-    {
-        &GUID_NULL,
-        FILE_GENERIC_READ | FILE_GENERIC_WRITE | FILE_GENERIC_EXECUTE | DELETE,
-        MAKEINTRESOURCEW(IDS_SECURITY_MODIFY),
-        SI_ACCESS_GENERAL
-    },
-    {
-        &GUID_NULL,
-        FILE_GENERIC_READ | FILE_GENERIC_EXECUTE,
-        MAKEINTRESOURCEW(IDS_SECURITY_READ_EXEC),
-        SI_ACCESS_GENERAL
-    },
-    {
-        &GUID_NULL,
-        FILE_GENERIC_READ,
-        MAKEINTRESOURCEW(IDS_SECURITY_READ),
-        SI_ACCESS_GENERAL
-    },
-    {
-        &GUID_NULL,
-        FILE_GENERIC_WRITE & ~READ_CONTROL,
-        MAKEINTRESOURCEW(IDS_SECURITY_WRITE),
-        SI_ACCESS_GENERAL
-    },
-
-    /* Advanced permissions */
-    { &GUID_NULL, FILE_ALL_ACCESS,       MAKEINTRESOURCEW(IDS_SECURITY_ALL_ACCESS),    SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_EXECUTE,          MAKEINTRESOURCEW(IDS_SECURITY_EXECUTE),       SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_READ_DATA,        MAKEINTRESOURCEW(IDS_SECURITY_READ_DATA),     SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_READ_ATTRIBUTES,  MAKEINTRESOURCEW(IDS_SECURITY_READ_ATTR),     SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_READ_EA,          MAKEINTRESOURCEW(IDS_SECURITY_READ_EX_ATTR),  SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_WRITE_DATA,       MAKEINTRESOURCEW(IDS_SECURITY_WRITE_DATA),    SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_APPEND_DATA,      MAKEINTRESOURCEW(IDS_SECURITY_APPEND_DATA),   SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_WRITE_ATTRIBUTES, MAKEINTRESOURCEW(IDS_SECURITY_WRITE_ATTR),    SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_WRITE_EA,         MAKEINTRESOURCEW(IDS_SECURITY_WRITE_EX_ATTR), SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, DELETE,                MAKEINTRESOURCEW(IDS_SECURITY_DELETE),        SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, READ_CONTROL,          MAKEINTRESOURCEW(IDS_SECURITY_READ_PERM),     SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, WRITE_DAC,             MAKEINTRESOURCEW(IDS_SECURITY_CHANGE_PERM),   SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, WRITE_OWNER,           MAKEINTRESOURCEW(IDS_SECURITY_CHANGE_OWNER),  SI_ACCESS_SPECIFIC },
-};
-
-static const SI_ACCESS access_rights_directories[] =
-{
-    /* General access rights */
-    {
-        &GUID_NULL,
-        FILE_ALL_ACCESS,
-        MAKEINTRESOURCEW(IDS_SECURITY_ALL_ACCESS),
-        SI_ACCESS_GENERAL
-    },
-    {
-        &GUID_NULL,
-        FILE_GENERIC_READ | FILE_GENERIC_WRITE | FILE_GENERIC_EXECUTE | DELETE,
-        MAKEINTRESOURCEW(IDS_SECURITY_MODIFY),
-        SI_ACCESS_GENERAL
-    },
-    {
-        &GUID_NULL,
-        FILE_GENERIC_READ | FILE_GENERIC_EXECUTE,
-        MAKEINTRESOURCEW(IDS_SECURITY_DIR_LIST),
-        SI_ACCESS_GENERAL
-    },
-    {
-        &GUID_NULL,
-        FILE_GENERIC_READ,
-        MAKEINTRESOURCEW(IDS_SECURITY_READ),
-        SI_ACCESS_GENERAL
-    },
-    {
-        &GUID_NULL,
-        FILE_GENERIC_WRITE & ~READ_CONTROL,
-        MAKEINTRESOURCEW(IDS_SECURITY_WRITE),
-        SI_ACCESS_GENERAL
-    },
-
-    /* Advanced permissions */
-    { &GUID_NULL, FILE_ALL_ACCESS,       MAKEINTRESOURCEW(IDS_SECURITY_ALL_ACCESS),    SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_TRAVERSE,         MAKEINTRESOURCEW(IDS_SECURITY_TRAVERSE),      SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_LIST_DIRECTORY,   MAKEINTRESOURCEW(IDS_SECURITY_LIST_FOLDER),   SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_READ_ATTRIBUTES,  MAKEINTRESOURCEW(IDS_SECURITY_READ_ATTR),     SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_READ_EA,          MAKEINTRESOURCEW(IDS_SECURITY_READ_EX_ATTR),  SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_ADD_FILE,         MAKEINTRESOURCEW(IDS_SECURITY_CREATE_FILES),  SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_ADD_SUBDIRECTORY, MAKEINTRESOURCEW(IDS_SEUCRITY_CREATE_FOLDER), SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_WRITE_ATTRIBUTES, MAKEINTRESOURCEW(IDS_SECURITY_WRITE_ATTR),    SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_WRITE_EA,         MAKEINTRESOURCEW(IDS_SECURITY_WRITE_EX_ATTR), SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, FILE_DELETE_CHILD,     MAKEINTRESOURCEW(IDS_SECURITY_DELETE_CHILD),  SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, DELETE,                MAKEINTRESOURCEW(IDS_SECURITY_DELETE),        SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, READ_CONTROL,          MAKEINTRESOURCEW(IDS_SECURITY_READ_PERM),     SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, WRITE_DAC,             MAKEINTRESOURCEW(IDS_SECURITY_CHANGE_PERM),   SI_ACCESS_SPECIFIC },
-    { &GUID_NULL, WRITE_OWNER,           MAKEINTRESOURCEW(IDS_SECURITY_CHANGE_OWNER),  SI_ACCESS_SPECIFIC },
-};
-
-struct FileSecurity
-{
-    ISecurityInformation ISecurityInformation_iface;
-    LONG ref;
-    WCHAR *path;
-    BOOL directory;
-};
-
-static inline struct FileSecurity *impl_from_ISecurityInformation(ISecurityInformation *iface)
-{
-    return CONTAINING_RECORD(iface, struct FileSecurity, ISecurityInformation_iface);
-}
-
 struct verb
 {
     WCHAR *desc;
@@ -994,269 +875,6 @@ static void get_filetype(LPCITEMIDLIST pidl, WCHAR filetype[MAX_PATH])
     }
 }
 
-static HRESULT WINAPI filesecurity_QueryInterface(ISecurityInformation *iface, REFIID riid, void **ppv)
-{
-    struct FileSecurity *This = impl_from_ISecurityInformation(iface);
-
-    if (IsEqualGUID(&IID_IUnknown, riid))
-    {
-        TRACE("(%p)->(IID_IUnknown %p)\n", This, ppv);
-        *ppv = &This->ISecurityInformation_iface;
-    }
-    else if (IsEqualGUID(&IID_ISecurityInformation, riid))
-    {
-        TRACE("(%p)->(IID_ISecurityInformation %p)\n", This, ppv);
-        *ppv = &This->ISecurityInformation_iface;
-    }
-    else
-    {
-        *ppv = NULL;
-        WARN("Unsupported interface %s\n", debugstr_guid(riid));
-        return E_NOINTERFACE;
-    }
-
-    IUnknown_AddRef((IUnknown *)*ppv);
-    return S_OK;
-}
-
-static ULONG WINAPI filesecurity_AddRef(ISecurityInformation *iface)
-{
-    struct FileSecurity *This = impl_from_ISecurityInformation(iface);
-
-    TRACE("(%p)\n", This);
-
-    return InterlockedIncrement(&This->ref);
-}
-
-static ULONG WINAPI filesecurity_Release(ISecurityInformation *iface)
-{
-    struct FileSecurity *This = impl_from_ISecurityInformation(iface);
-    ULONG ref;
-
-    TRACE("(%p)\n", This);
-
-    ref = InterlockedDecrement(&This->ref);
-    if (!ref)
-    {
-        HeapFree(GetProcessHeap(), 0, This->path);
-        HeapFree(GetProcessHeap(), 0, This);
-    }
-
-    return ref;
-}
-
-static HRESULT WINAPI filesecurity_GetObjectInformation(ISecurityInformation *iface, SI_OBJECT_INFO *info)
-{
-    struct FileSecurity *This = impl_from_ISecurityInformation(iface);
-
-    TRACE("(%p, %p)\n", This, info);
-
-    info->dwFlags = SI_ADVANCED;
-    info->hInstance = shell32_hInstance;
-    info->pszServerName = NULL;
-    info->pszObjectName = This->path;
-    info->pszPageTitle = NULL;
-    memcpy(&info->guidObjectType, &GUID_NULL, sizeof(GUID));
-
-    return S_OK;
-}
-
-static HRESULT WINAPI filesecurity_GetSecurity(ISecurityInformation *iface, SECURITY_INFORMATION info, PSECURITY_DESCRIPTOR *sd, BOOL default_sd)
-{
-    struct FileSecurity *This = impl_from_ISecurityInformation(iface);
-
-    TRACE("(%p, %lu, %p, %u)\n", This, info, sd, default_sd);
-
-    if (default_sd)
-        FIXME("Returning a default sd is not implemented\n");
-
-    if (GetNamedSecurityInfoW(This->path, SE_FILE_OBJECT, info, NULL, NULL, NULL, NULL, sd) != ERROR_SUCCESS)
-        return E_FAIL;
-
-    return S_OK;
-}
-
-static HRESULT WINAPI filesecurity_SetSecurity(ISecurityInformation *iface, SECURITY_INFORMATION info, PSECURITY_DESCRIPTOR sd)
-{
-    struct FileSecurity *This = impl_from_ISecurityInformation(iface);
-    BOOL present, defaulted;
-    PSID owner, group;
-    ACL *dacl, *sacl;
-
-    TRACE("(%p, %lu, %p)\n", This, info, sd);
-
-    if (!GetSecurityDescriptorOwner(sd, &owner, &defaulted))
-        return E_FAIL;
-
-    if (!GetSecurityDescriptorGroup(sd, &group, &defaulted))
-        return E_FAIL;
-
-    if (!GetSecurityDescriptorDacl(sd, &present, &dacl, &defaulted))
-        return E_FAIL;
-    if (!present) dacl = NULL;
-
-    if (!GetSecurityDescriptorSacl(sd, &present, &sacl, &defaulted))
-        return E_FAIL;
-    if (!present) sacl = NULL;
-
-    if (SetNamedSecurityInfoW(This->path, SE_FILE_OBJECT, info, owner, group, dacl, sacl) != ERROR_SUCCESS)
-        return E_FAIL;
-
-    return S_OK;
-}
-
-static HRESULT WINAPI filesecurity_GetAccessRights(ISecurityInformation *iface, const GUID* type, DWORD flags, SI_ACCESS **access,
-                                                   ULONG *count, ULONG *default_access )
-{
-    struct FileSecurity *This = impl_from_ISecurityInformation(iface);
-
-    TRACE("(%p, %s, %lx, %p, %p, %p)\n", This, debugstr_guid(type), flags, access, count, default_access);
-
-    if (This->directory)
-    {
-        *access = (SI_ACCESS *)access_rights_directories;
-        *count = sizeof(access_rights_directories) / sizeof(access_rights_directories[0]);
-    }
-    else
-    {
-        *access = (SI_ACCESS *)access_rights_files;
-        *count = sizeof(access_rights_files) / sizeof(access_rights_files[0]);
-    }
-
-    *default_access = 0;
-    return S_OK;
-}
-
-static HRESULT WINAPI filesecurity_MapGeneric(ISecurityInformation *iface, const GUID *type, UCHAR *ace_flags, ACCESS_MASK *mask)
-{
-    static GENERIC_MAPPING file_access_map =
-    {
-        FILE_GENERIC_READ,
-        FILE_GENERIC_WRITE,
-        FILE_GENERIC_EXECUTE,
-        FILE_ALL_ACCESS
-    };
-    struct FileSecurity *This = impl_from_ISecurityInformation(iface);
-
-    FIXME("(%p, %s, %p, %p): semi-stub!\n", This, debugstr_guid(type), ace_flags, mask);
-
-    MapGenericMask((DWORD*)mask, &file_access_map);
-    return S_OK;
-}
-
-static HRESULT WINAPI filesecurity_GetInheritTypes(ISecurityInformation *iface, PSI_INHERIT_TYPE *types, ULONG *count)
-{
-    struct FileSecurity *This = impl_from_ISecurityInformation(iface);
-
-    FIXME("(%p, %p, %p): stub!\n", This, types, count);
-
-    *types = NULL;
-    *count = 0;
-
-    return S_OK;
-}
-
-static HRESULT WINAPI filesecurity_PropertySheetPageCallback(ISecurityInformation *iface, HWND hwnd, UINT msg, SI_PAGE_TYPE page)
-{
-    struct FileSecurity *This = impl_from_ISecurityInformation(iface);
-
-    TRACE("(%p, %p, %u, %u)\n", This, hwnd, msg, page);
-    return S_OK;
-}
-
-static const struct ISecurityInformationVtbl filesecurity_vtbl =
-{
-    /* IUnknown */
-    filesecurity_QueryInterface,
-    filesecurity_AddRef,
-    filesecurity_Release,
-    /* ISecurityInformation */
-    filesecurity_GetObjectInformation,
-    filesecurity_GetSecurity,
-    filesecurity_SetSecurity,
-    filesecurity_GetAccessRights,
-    filesecurity_MapGeneric,
-    filesecurity_GetInheritTypes,
-    filesecurity_PropertySheetPageCallback,
-};
-
-static ISecurityInformation *create_filesecurity_information(WCHAR *path, BOOL directory)
-{
-    struct FileSecurity *security;
-    DWORD len;
-
-    security = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*security));
-    if (!security) return NULL;
-
-    security->ISecurityInformation_iface.lpVtbl = &filesecurity_vtbl;
-    security->ref = 1;
-    security->directory = directory;
-
-    len = (wcslen(path) + 1) * sizeof(WCHAR);
-    security->path = HeapAlloc(GetProcessHeap(), 0, len);
-    if (!security->path) goto error;
-
-    memcpy(security->path, path, len);
-    return &security->ISecurityInformation_iface;
-
-error:
-    HeapFree(GetProcessHeap(), 0, security);
-    return NULL;
-}
-
-static void init_security_properties_pages(IDataObject *pDo, LPFNADDPROPSHEETPAGE lpfnAddPage, LPARAM lParam)
-{
-    ISecurityInformation *security;
-    HPROPSHEETPAGE security_page;
-    FORMATETC format;
-    STGMEDIUM stgm;
-    DWORD attrib;
-    WCHAR *path;
-    UINT len;
-
-    format.cfFormat = CF_HDROP;
-    format.ptd      = NULL;
-    format.dwAspect = DVASPECT_CONTENT;
-    format.lindex   = -1;
-    format.tymed    = TYMED_HGLOBAL;
-
-    if (FAILED(IDataObject_GetData(pDo, &format, &stgm)))
-        return;
-
-    if (!(len = DragQueryFileW((HDROP)stgm.hGlobal, 0, NULL, 0)))
-    {
-        ReleaseStgMedium(&stgm);
-        return;
-    }
-
-    if (!(path = HeapAlloc(GetProcessHeap(), 0, (len + 1) * sizeof(WCHAR))))
-    {
-        ReleaseStgMedium(&stgm);
-        return;
-    }
-
-    len = DragQueryFileW((HDROP)stgm.hGlobal, 0, path, len + 1);
-    ReleaseStgMedium(&stgm);
-    if (!len) goto done;
-
-    attrib = GetFileAttributesW(path);
-    if (attrib == INVALID_FILE_ATTRIBUTES)
-        goto done;
-
-    if (!(security = create_filesecurity_information(path, attrib & FILE_ATTRIBUTE_DIRECTORY)))
-        goto done;
-
-    security_page = CreateSecurityPage(security);
-    IUnknown_Release((IUnknown *)security);
-    if (!security_page) goto done;
-
-    lpfnAddPage(security_page, lParam);
-
-done:
-    HeapFree(GetProcessHeap(), 0, path);
-}
-
-
 #define MAX_PROP_PAGES 99
 
 static void DoOpenProperties(ContextMenu *This, HWND hwnd)
@@ -1306,7 +924,6 @@ static void DoOpenProperties(ContextMenu *This, HWND hwnd)
 	if (SUCCEEDED(ret))
 	{
             init_file_properties_pages(lpDo, Properties_AddPropSheetCallback, (LPARAM)&psh);
-            init_security_properties_pages(lpDo, Properties_AddPropSheetCallback, (LPARAM)&psh);
 
 	    hpsxa = SHCreatePropSheetExtArrayEx(HKEY_CLASSES_ROOT, wszFiletype, MAX_PROP_PAGES - psh.nPages, lpDo);
 	    if (hpsxa != NULL)
diff --git a/dlls/shell32/shresdef.h b/dlls/shell32/shresdef.h
index 397256893f8..cee1069142c 100644
--- a/dlls/shell32/shresdef.h
+++ b/dlls/shell32/shresdef.h
@@ -153,41 +153,6 @@
 #define IDM_RECYCLEBIN_RESTORE      301
 #define IDM_RECYCLEBIN_ERASE        302
 
-/* Strings for file operations */
-#define IDS_FILEOP_COPYING          333
-#define IDS_FILEOP_MOVING           334
-#define IDS_FILEOP_DELETING         335
-#define IDS_FILEOP_FROM_TO          336
-#define IDS_FILEOP_FROM             337
-#define IDS_FILEOP_PREFLIGHT        338
-
-/* Strings for security dialog - General */
-#define IDS_SECURITY_ALL_ACCESS     340
-#define IDS_SECURITY_MODIFY         341
-#define IDS_SECURITY_READ_EXEC      342
-#define IDS_SECURITY_READ           343
-#define IDS_SECURITY_WRITE          344
-#define IDS_SECURITY_DIR_LIST       345
-
-/* Strings for security dialog - Advanced */
-#define IDS_SECURITY_TRAVERSE       346
-#define IDS_SECURITY_EXECUTE        347
-#define IDS_SECURITY_LIST_FOLDER    348
-#define IDS_SECURITY_READ_DATA      349
-#define IDS_SECURITY_READ_ATTR      350
-#define IDS_SECURITY_READ_EX_ATTR   351
-#define IDS_SECURITY_CREATE_FILES   352
-#define IDS_SECURITY_WRITE_DATA     353
-#define IDS_SEUCRITY_CREATE_FOLDER  354
-#define IDS_SECURITY_APPEND_DATA    355
-#define IDS_SECURITY_WRITE_ATTR     356
-#define IDS_SECURITY_WRITE_EX_ATTR  357
-#define IDS_SECURITY_DELETE_CHILD   358
-#define IDS_SECURITY_DELETE         359
-#define IDS_SECURITY_READ_PERM      360
-#define IDS_SECURITY_CHANGE_PERM    361
-#define IDS_SECURITY_CHANGE_OWNER   362
-
 /* Note: this string is referenced from the registry*/
 #define IDS_RECYCLEBIN_FOLDER_NAME   8964
 
-- 
2.50.0

